From 3ca307db6e42c352a5c0817852c7a357339e9e96 Mon Sep 17 00:00:00 2001
From: Kondapally Kalyan <kalyan.kondapally@intel.com>
Date: Mon, 23 Sep 2013 20:40:42 +0300
Subject: [PATCH] Set Wayland as the implementation for SurfaceFactoryOzone

The fundamental problem to be solved here is to find a way to set downstream
Ozone implementations (e.g. Wayland) in the upstream code, without changing any
line of code there.

One idea is to make Ozone implementations as modules loadable that could be
picked from a particular directory in the system (is it safe?) or maybe chosen
by command line. There are probably other ways for doing so also. So, before
start investigating this problem, we should contact rjkroege for any advice.

This is patch is a hack and in principle shouldn't be extended much.
---
 ash/shell/content_client/shell_main_delegate.cc |    5 +++++
 build/common.gypi                               |    6 ++++++
 chrome/app/chrome_main_delegate.cc              |    9 +++++++++
 content/shell/app/shell_main_delegate.cc        |   15 +++++++++++++++
 ui/aura/aura.gyp                                |    5 +++++
 ui/aura/demo/demo_main.cc                       |    9 +++++++++
 6 files changed, 49 insertions(+)

diff --git a/ash/shell/content_client/shell_main_delegate.cc b/ash/shell/content_client/shell_main_delegate.cc
index 014fae1..d3b2705 100644
--- a/ash/shell/content_client/shell_main_delegate.cc
+++ b/ash/shell/content_client/shell_main_delegate.cc
@@ -9,6 +9,8 @@
 #include "content/public/common/content_switches.h"
 #include "ui/base/resource/resource_bundle.h"
 
+#include "ozone/impl/ozone_display.h"
+
 namespace ash {
 namespace shell {
 
@@ -29,6 +31,9 @@ bool ShellMainDelegate::BasicStartupComplete(int* exit_code) {
 }
 
 void ShellMainDelegate::PreSandboxStartup() {
+  /* TODO: Implementation specific. Has to go away */
+  gfx::SurfaceFactoryOzone *o_factory = new ozonewayland::OzoneDisplay();
+  gfx::SurfaceFactoryOzone::SetInstance(o_factory);
   InitializeResourceBundle();
 }
 
diff --git a/build/common.gypi b/build/common.gypi
index 2cc0224..6e2987a 100644
--- a/build/common.gypi
+++ b/build/common.gypi
@@ -146,6 +146,12 @@
             'toolkit_uses_gtk%': 0,
           }],
 
+          ['use_ozone==1', {
+            'dependencies': [
+              '<(DEPTH)/ozone/ozone_impl.gyp:wayland',
+            ]
+          }],
+
           # Enable HiDPI on Mac OS and Chrome OS.
           ['OS=="mac" or chromeos==1', {
             'enable_hidpi%': 1,
diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
index bcb1e34..4222ebe 100644
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -101,6 +101,9 @@
 #include "chrome/app/breakpad_linux.h"
 #endif
 
+#include "ozone/impl/ozone_display.h"
+#include "ozone/impl/desktop_factory_wayland.h"
+
 #if !defined(CHROME_MULTIPLE_DLL_CHILD)
 base::LazyInstance<chrome::ChromeContentBrowserClient>
     g_chrome_content_browser_client = LAZY_INSTANCE_INITIALIZER;
@@ -590,6 +593,12 @@ void ChromeMainDelegate::PreSandboxStartup() {
   std::string process_type =
       command_line.GetSwitchValueASCII(switches::kProcessType);
 
+  /* TODO: Implementation specific. Has to go away */
+  gfx::SurfaceFactoryOzone *o_factory = new ozonewayland::OzoneDisplay();
+  gfx::SurfaceFactoryOzone::SetInstance(o_factory);
+  views::DesktopFactoryOzone *d_factory = new ozonewayland::DesktopFactoryWayland();
+  views::DesktopFactoryOzone::SetInstance(d_factory);
+
 #if defined(OS_POSIX)
   breakpad::SetBreakpadClient(g_chrome_breakpad_client.Pointer());
 #endif
diff --git a/content/shell/app/shell_main_delegate.cc b/content/shell/app/shell_main_delegate.cc
index f7f6e14..4e5c4b6 100644
--- a/content/shell/app/shell_main_delegate.cc
+++ b/content/shell/app/shell_main_delegate.cc
@@ -26,6 +26,9 @@
 #include "ui/gfx/switches.h"
 #include "ui/gl/gl_switches.h"
 
+#include "ozone/impl/desktop_factory_wayland.h"
+#include "ozone/impl/ozone_display.h"
+
 #include "ipc/ipc_message.h"  // For IPC_MESSAGE_LOG_ENABLED.
 
 #if defined(IPC_MESSAGE_LOG_ENABLED)
@@ -90,6 +93,12 @@ ShellMainDelegate::ShellMainDelegate() {
 }
 
 ShellMainDelegate::~ShellMainDelegate() {
+  gfx::SurfaceFactoryOzone* surface_factory = gfx::SurfaceFactoryOzone::GetInstance();
+  if (surface_factory) {
+    surface_factory->ShutdownHardware();
+    gfx::SurfaceFactoryOzone::SetInstance(NULL);
+    delete surface_factory;
+  }
 }
 
 bool ShellMainDelegate::BasicStartupComplete(int* exit_code) {
@@ -175,6 +184,12 @@ bool ShellMainDelegate::BasicStartupComplete(int* exit_code) {
 
 void ShellMainDelegate::PreSandboxStartup() {
   InitializeResourceBundle();
+
+  /* TODO: Implementation specific. Has to go away */
+  gfx::SurfaceFactoryOzone *o_factory = new ozonewayland::OzoneDisplay();
+  gfx::SurfaceFactoryOzone::SetInstance(o_factory);
+  views::DesktopFactoryOzone *d_factory = new ozonewayland::DesktopFactoryWayland();
+  views::DesktopFactoryOzone::SetInstance(d_factory);
 }
 
 int ShellMainDelegate::RunProcess(
diff --git a/ui/aura/aura.gyp b/ui/aura/aura.gyp
index 249f05e..8ab0891 100644
--- a/ui/aura/aura.gyp
+++ b/ui/aura/aura.gyp
@@ -127,6 +127,11 @@
             'input_state_lookup.cc',
           ],
         }],
+        ['use_ozone==1', {
+          'dependencies': [
+            '../../ozone/ozone_impl.gyp:wayland',
+          ]
+        }],
       ],
     },
     {
diff --git a/ui/aura/demo/demo_main.cc b/ui/aura/demo/demo_main.cc
index e56ab71..077489e 100644
--- a/ui/aura/demo/demo_main.cc
+++ b/ui/aura/demo/demo_main.cc
@@ -24,6 +24,8 @@
 #include "ui/gfx/canvas.h"
 #include "ui/gfx/rect.h"
 
+#include "ozone/impl/ozone_display.h"
+
 #if defined(USE_X11)
 #include "base/message_loop/message_pump_x11.h"
 #endif
@@ -108,6 +110,10 @@ class DemoStackingClient : public aura::client::StackingClient {
 };
 
 int DemoMain() {
+  /* TODO: Implementation specific. Has to go away */
+  gfx::SurfaceFactoryOzone *o_factory = new ozonewayland::OzoneDisplay();
+  gfx::SurfaceFactoryOzone::SetInstance(o_factory);
+
   // Create the message-loop here before creating the root window.
   base::MessageLoop message_loop(base::MessageLoop::TYPE_UI);
 
@@ -153,6 +159,9 @@ int DemoMain() {
   root_window->ShowRootWindow();
   base::MessageLoopForUI::current()->Run();
 
+  o_factory->ShutdownHardware();
+  delete o_factory;
+
   return 0;
 }
 
-- 
1.7.9.5

