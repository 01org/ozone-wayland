From c4ea9db0866402ff8e4de331956d2b0cde0ae90b Mon Sep 17 00:00:00 2001
From: Kondapally Kalyan <kalyan.kondapally@intel.com>
Date: Tue, 17 Jun 2014 19:12:29 +0300
Subject: [PATCH 1/2] Add needed support in Content.

In Wayland case all window related events need to be sent to GPU process.
We have a minimal IPC implementation, handling messages very specific to
our needs. This patch adds support for the following:

1) Register OzoneChannel and Host as MessageFilters after the succesfull
   launch of GPU and Browser process respectively.
2) Ensure our content related files are compiled as part of
   content_common target.
---
 content/browser/browser_main_loop.cc |   16 ++++++++++++++++
 content/content_common.gypi          |   19 +++++++++++++++++++
 content/gpu/gpu_main.cc              |    9 +++++++++
 3 files changed, 44 insertions(+)

diff --git a/content/browser/browser_main_loop.cc b/content/browser/browser_main_loop.cc
index 41bd7b8..56a24f7 100644
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -125,6 +125,10 @@
 #include "ui/gfx/x/x11_types.h"
 #endif
 
+#if defined(USE_OZONE)
+#include "ozone/content/ozone_channel_host_factory.h"
+#endif
+
 // One of the linux specific headers defines this as a macro.
 #ifdef DestroyAll
 #undef DestroyAll
@@ -874,6 +878,11 @@ void BrowserMainLoop::ShutdownThreadsAndCleanUp() {
     TRACE_EVENT0("shutdown", "BrowserMainLoop::Subsystem:GPUChannelFactory");
     if (BrowserGpuChannelHostFactory::instance())
       BrowserGpuChannelHostFactory::Terminate();
+
+#if defined(USE_OZONE)
+    if (OzoneChannelHostFactory::instance())
+      OzoneChannelHostFactory::Terminate();
+#endif
   }

   // Must happen after the I/O thread is shutdown since this class lives on the
@@ -1046,6 +1055,13 @@ int BrowserMainLoop::BrowserThreadsStarted() {
   }
 #endif  // defined(OS_MACOSX)

+#if defined(USE_OZONE)
+  bool using_gpu_process =
+      !parsed_command_line_.HasSwitch(switches::kSingleProcess) &&
+      !parsed_command_line_.HasSwitch(switches::kInProcessGPU);
+  OzoneChannelHostFactory::Initialize(using_gpu_process);
+#endif
+
 #endif  // !defined(OS_IOS)

   return result_code_;
diff --git a/content/content_common.gypi b/content/content_common.gypi
index 3a91365..9d8277f 100644
--- a/content/content_common.gypi
+++ b/content/content_common.gypi
@@ -725,6 +725,25 @@
         },
      ]
     }],
+    ['use_ozone == 1', {
+      'sources': [
+        '<(DEPTH)/ozone/content/event_converter_in_process.h',
+        '<(DEPTH)/ozone/content/event_converter_in_process.cc',
+        '<(DEPTH)/ozone/content/messages.h',
+        '<(DEPTH)/ozone/content/message_generator.h',
+        '<(DEPTH)/ozone/content/message_generator.cc',
+        '<(DEPTH)/ozone/content/ozone_channel.h',
+        '<(DEPTH)/ozone/content/ozone_channel.cc',
+        '<(DEPTH)/ozone/content/ozone_channel_host.h',
+        '<(DEPTH)/ozone/content/ozone_channel_host.cc',
+        '<(DEPTH)/ozone/content/ozone_channel_host_factory.h',
+        '<(DEPTH)/ozone/content/ozone_channel_host_factory.cc',
+        '<(DEPTH)/ozone/content/remote_event_dispatcher.h',
+        '<(DEPTH)/ozone/content/remote_event_dispatcher.cc',
+        '<(DEPTH)/ozone/content/remote_state_change_handler.h',
+        '<(DEPTH)/ozone/content/remote_state_change_handler.cc',
+      ],
+    }],
     ['OS=="win"', {
       'dependencies': [
         '../media/media.gyp:media',
diff --git a/content/gpu/gpu_main.cc b/content/gpu/gpu_main.cc
index 1f68ee5..67cab92 100644
--- a/content/gpu/gpu_main.cc
+++ b/content/gpu/gpu_main.cc
@@ -60,6 +60,10 @@
 #include <sanitizer/asan_interface.h>
 #endif
 
+#if defined(USE_OZONE)
+#include "ozone/content/ozone_channel.h"
+#endif
+
 const int kGpuTimeout = 10000;
 
 namespace content {
@@ -353,6 +357,11 @@ int GpuMain(const MainFunctionParams& parameters) {
 
   {
     TRACE_EVENT0("gpu", "Run Message Loop");
+
+#if defined(USE_OZONE)
+    OzoneChannel channel;
+    channel.Register();
+#endif
     main_message_loop.Run();
   }

-- 
1.7.9.5

