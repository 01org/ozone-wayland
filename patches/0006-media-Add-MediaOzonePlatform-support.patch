From 305f7fb840358ee509500f69e4905718706ce257 Mon Sep 17 00:00:00 2001
From: Tiago Vignatti <tiago.vignatti@intel.com>
Date: Fri, 6 Jun 2014 14:26:53 -0300
Subject: [PATCH] media: Add MediaOzonePlatform support

This CL adds MediaOzonePlatform, a new Ozone component for abstracting media
and related. In particular it adds CreateVideoDecodeAccelerator method so Ozone
implementations can use that for abstracting video decoding acceleration (i.e.
GPU based video decoding). Eventually MediaOzonePlatform will be used as well
for many windowing systems abstractions related to media, e.g. video encode,
audio, etc. We will add support for these others as needed.

Media platform is called and created on demand whenever a video playback is set
to play. Different than ui::OzonePlatform methods, the one added in here is
non-pure virtual so the implementations can decide themselves whether a video
implementation is actually wanted, based on its hardware capabilities.

This work is aimed at internal implementations like Ozone-DRI, Ozone-test but
also for externals like Ozone-Wayland. Different targets like Chromium Browser,
Chrome OS, ChromeCast and others can now take advantage of it.

BUG=None
TEST=manually on Ozone-Wayland, using:

 $ export GYP_DEFINES='chromeos=0 use_ozone=1 proprietary_codecs=1 ffmpeg_branding=Chrome'
 $ ninja -j16 -C out/Release content

and to run:

 ~/git/chromium/src/out/Debug$ ./chrome --no-sandbox --user-data-dir=/tmp/chrome --ignore-gpu-blacklist ../../third_party/WebKit/PerformanceTests/resources/bear-1280x720.mp4  --vmodule=*/ozone/ui*=3 --v=0

additionally, in Release builds you can start chrome with
--disable-accelerated-video-decode to compare the results.
---
 .../gpu/media/gpu_video_decode_accelerator.cc      |   11 +++
 media/DEPS                                         |    1 +
 media/media.gyp                                    |   45 ++++++++++
 media/ozone/media_ozone_platform.cc                |   93 ++++++++++++++++++++
 media/ozone/media_ozone_platform.h                 |   47 ++++++++++
 5 files changed, 197 insertions(+)
 create mode 100644 media/ozone/media_ozone_platform.cc
 create mode 100644 media/ozone/media_ozone_platform.h

diff --git a/content/common/gpu/media/gpu_video_decode_accelerator.cc b/content/common/gpu/media/gpu_video_decode_accelerator.cc
index 0d94eaa..ddd5ebe 100644
--- a/content/common/gpu/media/gpu_video_decode_accelerator.cc
+++ b/content/common/gpu/media/gpu_video_decode_accelerator.cc
@@ -33,6 +33,8 @@
 #include "content/common/gpu/media/vaapi_video_decode_accelerator.h"
 #include "ui/gl/gl_context_glx.h"
 #include "ui/gl/gl_implementation.h"
+#elif defined(USE_OZONE)
+#include "media/ozone/media_ozone_platform.h"
 #elif defined(OS_ANDROID)
 #include "content/common/gpu/media/android_video_decode_accelerator.h"
 #endif
@@ -275,6 +277,15 @@ void GpuVideoDecodeAccelerator::Initialize(
       static_cast<gfx::GLContextGLX*>(stub_->decoder()->GetGLContext());
   video_decode_accelerator_.reset(new VaapiVideoDecodeAccelerator(
       glx_context->display(), make_context_current_));
+#elif defined(USE_OZONE)
+  media::MediaOzonePlatform* platform =
+      media::MediaOzonePlatform::GetInstance();
+  video_decode_accelerator_.reset(platform->CreateVideoDecodeAccelerator(
+      make_context_current_));
+  if (!video_decode_accelerator_) {
+    SendCreateDecoderReply(init_done_msg, false);
+    return;
+  }
 #elif defined(OS_ANDROID)
   video_decode_accelerator_.reset(new AndroidVideoDecodeAccelerator(
       stub_->decoder()->AsWeakPtr(),
diff --git a/media/DEPS b/media/DEPS
index 62f5a90..8f61ef2 100644
--- a/media/DEPS
+++ b/media/DEPS
@@ -10,4 +10,5 @@ include_rules = [
   "+ui/events",
   "+ui/gfx",
   "+ui/gl",
+  "+ui/ozone",
 ]
diff --git a/media/media.gyp b/media/media.gyp
index bbded6f..5658fff 100644
--- a/media/media.gyp
+++ b/media/media.gyp
@@ -461,6 +461,8 @@
         'midi/usb_midi_jack.h',
         'midi/usb_midi_output_stream.cc',
         'midi/usb_midi_output_stream.h',
+        'ozone/media_ozone_platform.cc',
+        'ozone/media_ozone_platform.h',
         'video/capture/android/video_capture_device_android.cc',
         'video/capture/android/video_capture_device_android.h',
         'video/capture/android/video_capture_device_factory_android.cc',
@@ -716,6 +718,49 @@
             }],
           ],
         }],
+        ['use_ozone==1', {
+          'variables': {
+            'platform_list_txt_file': '<(SHARED_INTERMEDIATE_DIR)/ui/ozone/platform_list.txt',
+            'constructor_list_cc_file': '<(INTERMEDIATE_DIR)/media/ozone/constructor_list.cc',
+          },
+          'include_dirs': [
+              # Used for the generated listing header (ui/ozone/platform_list.h)
+              '<(SHARED_INTERMEDIATE_DIR)',
+          ],
+          'sources': [
+            '<(constructor_list_cc_file)',
+          ],
+          'dependencies': [
+            '../ui/ozone/ozone.gyp:ozone',
+          ],
+          'actions': [
+            {
+              # Ozone platform objects are auto-generated using similar
+              # patterns for naming and classes constructors. Here we build the
+              # object MediaOzonePlatform.
+              'action_name': 'generate_constructor_list',
+              'variables': {
+                'generator_path': '../ui/ozone/generate_constructor_list.py',
+              },
+              'inputs': [
+                '<(generator_path)',
+                '<(platform_list_txt_file)',
+              ],
+              'outputs': [
+                '<(constructor_list_cc_file)',
+              ],
+              'action': [
+                'python',
+                '<(generator_path)',
+                '--platform_list=<(platform_list_txt_file)',
+                '--output_cc=<(constructor_list_cc_file)',
+                '--namespace=media',
+                '--typename=MediaOzonePlatform',
+                '--include="media/ozone/media_ozone_platform.h"'
+              ],
+            },
+          ]
+        }],
         ['OS!="linux"', {
           'sources!': [
             'audio/cras/audio_manager_cras.cc',
diff --git a/media/ozone/media_ozone_platform.cc b/media/ozone/media_ozone_platform.cc
new file mode 100644
index 0000000..804de37
--- /dev/null
+++ b/media/ozone/media_ozone_platform.cc
@@ -0,0 +1,93 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "media/ozone/media_ozone_platform.h"
+
+#include "base/debug/trace_event.h"
+#include "base/logging.h"
+#include "ui/ozone/platform_object.h"
+#include "ui/ozone/platform_selection.h"
+
+namespace media {
+
+namespace {
+
+class MediaOzonePlatformStub : public MediaOzonePlatform {
+ public:
+  MediaOzonePlatformStub() {}
+
+  virtual ~MediaOzonePlatformStub() {}
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(MediaOzonePlatformStub);
+};
+
+}  // namespace
+
+// The following statics are just convenient stubs, declared by the
+// generate_constructor_list.py script. They should be removed once the
+// internal Ozone platforms decide to actually implement their media specifics.
+MediaOzonePlatform* CreateMediaOzonePlatformCaca() {
+  return new MediaOzonePlatformStub;
+}
+
+MediaOzonePlatform* CreateMediaOzonePlatformDri() {
+  return new MediaOzonePlatformStub;
+}
+
+MediaOzonePlatform* CreateMediaOzonePlatformEgltest() {
+  return new MediaOzonePlatformStub;
+}
+
+MediaOzonePlatform* CreateMediaOzonePlatformGbm() {
+  return new MediaOzonePlatformStub;
+}
+
+MediaOzonePlatform* CreateMediaOzonePlatformTest() {
+  return new MediaOzonePlatformStub;
+}
+
+MediaOzonePlatform::MediaOzonePlatform() {
+  CHECK(!instance_) << "There should only be a single MediaOzonePlatform.";
+  instance_ = this;
+}
+
+MediaOzonePlatform::~MediaOzonePlatform() {
+  CHECK_EQ(instance_, this);
+  instance_ = NULL;
+}
+
+// static
+MediaOzonePlatform* MediaOzonePlatform::GetInstance() {
+  if (!instance_)
+    CreateInstance();
+  return instance_;
+}
+
+VideoDecodeAccelerator* MediaOzonePlatform::CreateVideoDecodeAccelerator(
+    const base::Callback<bool(void)>& make_context_current) {
+  NOTIMPLEMENTED();
+  return NULL;
+}
+
+// static
+void MediaOzonePlatform::CreateInstance() {
+  if (instance_)
+    return;
+
+  TRACE_EVENT1("ozone",
+               "MediaOzonePlatform::Initialize",
+               "platform",
+               ui::GetOzonePlatformName());
+  scoped_ptr<MediaOzonePlatform> platform =
+      ui::PlatformObject<MediaOzonePlatform>::Create();
+
+  // TODO(spang): Currently need to leak this object.
+  CHECK_EQ(instance_, platform.release());
+}
+
+// static
+MediaOzonePlatform* MediaOzonePlatform::instance_;
+
+}  // namespace media
diff --git a/media/ozone/media_ozone_platform.h b/media/ozone/media_ozone_platform.h
new file mode 100644
index 0000000..c59775d
--- /dev/null
+++ b/media/ozone/media_ozone_platform.h
@@ -0,0 +1,47 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef MEDIA_OZONE_MEDIA_OZONE_PLATFORM_H_
+#define MEDIA_OZONE_MEDIA_OZONE_PLATFORM_H_
+
+#include "base/callback.h"
+#include "media/base/media_export.h"
+
+namespace media {
+
+class VideoDecodeAccelerator;
+
+// Class for Ozone platform media implementations. Note that the base class for
+// Ozone platform is at ui/ozone.
+//
+// Ozone platforms must override this class and implement the virtual
+// GetFooFactoryOzone() methods to provide implementations of the
+// various ozone interfaces.
+class MEDIA_EXPORT MediaOzonePlatform {
+ public:
+  MediaOzonePlatform();
+  virtual ~MediaOzonePlatform();
+
+  // Besides get the global instance, initializes the subsystems/resources
+  // necessary for media also.
+  static MediaOzonePlatform* GetInstance();
+
+  // Factory getters to override in subclasses. The returned objects will be
+  // injected into the appropriate layer at startup. Subclasses should not
+  // inject these objects themselves. Ownership is retained by
+  // MediaOzonePlatform.
+  virtual VideoDecodeAccelerator* CreateVideoDecodeAccelerator(
+      const base::Callback<bool(void)>& make_context_current);
+
+ private:
+  static void CreateInstance();
+
+  static MediaOzonePlatform* instance_;
+
+  DISALLOW_COPY_AND_ASSIGN(MediaOzonePlatform);
+};
+
+}  // namespace media
+
+#endif  // MEDIA_OZONE_MEDIA_OZONE_PLATFORM_H_
-- 
1.7.9.5

