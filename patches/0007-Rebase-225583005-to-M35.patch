From 187eff4416d00b721a930950ad5a8fae151ea502 Mon Sep 17 00:00:00 2001
From: Kondapally Kalyan <kalyan.kondapally@intel.com>
Date: Sun, 18 May 2014 21:18:49 +0300
Subject: [PATCH 3/5] Rebase 225583005 to M35.

---
 chrome/browser/ui/browser_command_controller.cc    |    4 +-
 .../ui/libgtk2ui/gtk2_key_bindings_handler.cc      |   98 +++++++--------
 .../ui/libgtk2ui/gtk2_key_bindings_handler.h       |    8 +-
 chrome/browser/ui/libgtk2ui/gtk2_ui.cc             |    2 +-
 chrome/browser/ui/libgtk2ui/gtk2_ui.h              |    4 +-
 .../renderer_host/render_widget_host_view_aura.cc  |   10 +-
 ui/events/events.gyp                               |   16 +--
 ui/events/x/text_edit_command_x11.cc               |  125 --------------------
 ui/events/x/text_edit_command_x11.h                |   82 -------------
 ui/events/x/text_edit_key_bindings_delegate_x11.cc |   22 ----
 ui/events/x/text_edit_key_bindings_delegate_x11.h  |   42 -------
 ui/views/controls/textfield/textfield.cc           |   82 ++++++-------
 ui/views/linux_ui/linux_ui.h                       |    4 +-
 13 files changed, 115 insertions(+), 384 deletions(-)
 delete mode 100644 ui/events/x/text_edit_command_x11.cc
 delete mode 100644 ui/events/x/text_edit_command_x11.h
 delete mode 100644 ui/events/x/text_edit_key_bindings_delegate_x11.cc
 delete mode 100644 ui/events/x/text_edit_key_bindings_delegate_x11.h

diff --git a/chrome/browser/ui/browser_command_controller.cc b/chrome/browser/ui/browser_command_controller.cc
index 0f899d1..1b0eef0 100644
--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -69,7 +69,7 @@
 #endif

 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
+#include "ui/events/linux/text_edit_key_bindings_delegate_auralinux.h"
 #endif

 using content::NavigationEntry;
@@ -290,7 +290,7 @@ bool BrowserCommandController::IsReservedCommandOrKey(
 #if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(TOOLKIT_GTK)
   // If this key was registered by the user as a content editing hotkey, then
   // it is not reserved.
-  ui::TextEditKeyBindingsDelegateX11* delegate =
+  ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
       ui::GetTextEditKeyBindingsDelegate();
   if (delegate && event.os_event && delegate->MatchEvent(*event.os_event, NULL))
     return false;
diff --git a/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.cc b/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.cc
index 11c8780..5f7e9a4 100644
--- a/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.cc
+++ b/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.cc
@@ -17,7 +17,7 @@
 #include "ui/base/x/x11_util.h"
 #include "ui/events/event.h"

-using ui::TextEditCommandX11;
+using ui::TextEditCommandAuraLinux;

 // TODO(erg): Rewrite the old gtk_key_bindings_handler_unittest.cc and get them
 // in a state that links. This code was adapted from the content layer GTK
@@ -48,7 +48,7 @@ Gtk2KeyBindingsHandler::~Gtk2KeyBindingsHandler() {

 bool Gtk2KeyBindingsHandler::MatchEvent(
     const ui::Event& event,
-    std::vector<TextEditCommandX11>* edit_commands) {
+    std::vector<TextEditCommandAuraLinux>* edit_commands) {
   CHECK(event.IsKeyEvent());

   const ui::KeyEvent& key_event = static_cast<const ui::KeyEvent&>(event);
@@ -88,10 +88,12 @@ GtkWidget* Gtk2KeyBindingsHandler::CreateNewHandler() {
 }

 void Gtk2KeyBindingsHandler::EditCommandMatched(
-    TextEditCommandX11::CommandId id,
+    TextEditCommandAuraLinux::CommandId id,
     const std::string& value,
     bool extend_selection) {
-  edit_commands_.push_back(TextEditCommandX11(id, value, extend_selection));
+  edit_commands_.push_back(TextEditCommandAuraLinux(id,
+                                                    value,
+                                                    extend_selection));
 }

 void Gtk2KeyBindingsHandler::BuildGdkEventKeyFromXEvent(
@@ -199,17 +201,17 @@ Gtk2KeyBindingsHandler* Gtk2KeyBindingsHandler::GetHandlerOwner(
 void Gtk2KeyBindingsHandler::BackSpace(GtkTextView* text_view) {
   GetHandlerOwner(text_view)
       ->EditCommandMatched(
-          TextEditCommandX11::DELETE_BACKWARD, std::string(), false);
+          TextEditCommandAuraLinux::DELETE_BACKWARD, std::string(), false);
 }

 void Gtk2KeyBindingsHandler::CopyClipboard(GtkTextView* text_view) {
   GetHandlerOwner(text_view)->EditCommandMatched(
-      TextEditCommandX11::COPY, std::string(), false);
+      TextEditCommandAuraLinux::COPY, std::string(), false);
 }

 void Gtk2KeyBindingsHandler::CutClipboard(GtkTextView* text_view) {
   GetHandlerOwner(text_view)->EditCommandMatched(
-      TextEditCommandX11::CUT, std::string(), false);
+      TextEditCommandAuraLinux::CUT, std::string(), false);
 }

 void Gtk2KeyBindingsHandler::DeleteFromCursor(
@@ -217,49 +219,49 @@ void Gtk2KeyBindingsHandler::DeleteFromCursor(
   if (!count)
     return;

-  TextEditCommandX11::CommandId commands[2] = {
-    TextEditCommandX11::INVALID_COMMAND,
-    TextEditCommandX11::INVALID_COMMAND,
+  TextEditCommandAuraLinux::CommandId commands[2] = {
+    TextEditCommandAuraLinux::INVALID_COMMAND,
+    TextEditCommandAuraLinux::INVALID_COMMAND,
   };
   switch (type) {
     case GTK_DELETE_CHARS:
       commands[0] = (count > 0 ?
-          TextEditCommandX11::DELETE_FORWARD :
-          TextEditCommandX11::DELETE_BACKWARD);
+          TextEditCommandAuraLinux::DELETE_FORWARD :
+          TextEditCommandAuraLinux::DELETE_BACKWARD);
       break;
     case GTK_DELETE_WORD_ENDS:
       commands[0] = (count > 0 ?
-          TextEditCommandX11::DELETE_WORD_FORWARD :
-          TextEditCommandX11::DELETE_WORD_BACKWARD);
+          TextEditCommandAuraLinux::DELETE_WORD_FORWARD :
+          TextEditCommandAuraLinux::DELETE_WORD_BACKWARD);
       break;
     case GTK_DELETE_WORDS:
       if (count > 0) {
-        commands[0] = TextEditCommandX11::MOVE_WORD_FORWARD;
-        commands[1] = TextEditCommandX11::DELETE_WORD_BACKWARD;
+        commands[0] = TextEditCommandAuraLinux::MOVE_WORD_FORWARD;
+        commands[1] = TextEditCommandAuraLinux::DELETE_WORD_BACKWARD;
       } else {
-        commands[0] = TextEditCommandX11::MOVE_WORD_BACKWARD;
-        commands[1] = TextEditCommandX11::DELETE_WORD_FORWARD;
+        commands[0] = TextEditCommandAuraLinux::MOVE_WORD_BACKWARD;
+        commands[1] = TextEditCommandAuraLinux::DELETE_WORD_FORWARD;
       }
       break;
     case GTK_DELETE_DISPLAY_LINES:
-      commands[0] = TextEditCommandX11::MOVE_TO_BEGINING_OF_LINE;
-      commands[1] = TextEditCommandX11::DELETE_TO_END_OF_LINE;
+      commands[0] = TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_LINE;
+      commands[1] = TextEditCommandAuraLinux::DELETE_TO_END_OF_LINE;
       break;
     case GTK_DELETE_DISPLAY_LINE_ENDS:
       commands[0] = (count > 0 ?
-          TextEditCommandX11::DELETE_TO_END_OF_LINE :
-          TextEditCommandX11::DELETE_TO_BEGINING_OF_LINE);
+          TextEditCommandAuraLinux::DELETE_TO_END_OF_LINE :
+          TextEditCommandAuraLinux::DELETE_TO_BEGINING_OF_LINE);
       break;
     case GTK_DELETE_PARAGRAPH_ENDS:
       commands[0] = (count > 0 ?
-          TextEditCommandX11::DELETE_TO_END_OF_PARAGRAPH :
-          TextEditCommandX11::DELETE_TO_BEGINING_OF_PARAGRAPH);
+          TextEditCommandAuraLinux::DELETE_TO_END_OF_PARAGRAPH :
+          TextEditCommandAuraLinux::DELETE_TO_BEGINING_OF_PARAGRAPH);
       break;
     case GTK_DELETE_PARAGRAPHS:
       commands[0] =
-          TextEditCommandX11::MOVE_TO_BEGINING_OF_PARAGRAPH;
+          TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_PARAGRAPH;
       commands[1] =
-          TextEditCommandX11::DELETE_TO_END_OF_PARAGRAPH;
+          TextEditCommandAuraLinux::DELETE_TO_END_OF_PARAGRAPH;
       break;
     default:
       // GTK_DELETE_WHITESPACE has no corresponding editor command.
@@ -271,7 +273,7 @@ void Gtk2KeyBindingsHandler::DeleteFromCursor(
     count = -count;
   for (; count > 0; --count) {
     for (size_t i = 0; i < arraysize(commands); ++i)
-      if (commands[i] != TextEditCommandX11::INVALID_COMMAND)
+      if (commands[i] != TextEditCommandAuraLinux::INVALID_COMMAND)
         owner->EditCommandMatched(commands[i], std::string(), false);
   }
 }
@@ -280,7 +282,7 @@ void Gtk2KeyBindingsHandler::InsertAtCursor(GtkTextView* text_view,
                                             const gchar* str) {
   if (str && *str)
     GetHandlerOwner(text_view)->EditCommandMatched(
-        TextEditCommandX11::INSERT_TEXT, str, false);
+        TextEditCommandAuraLinux::INSERT_TEXT, str, false);
 }

 void Gtk2KeyBindingsHandler::MoveCursor(
@@ -289,44 +291,44 @@ void Gtk2KeyBindingsHandler::MoveCursor(
   if (!count)
     return;

-  TextEditCommandX11::CommandId command;
+  TextEditCommandAuraLinux::CommandId command;
   switch (step) {
     case GTK_MOVEMENT_LOGICAL_POSITIONS:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_FORWARD :
-                 TextEditCommandX11::MOVE_BACKWARD);
+                 TextEditCommandAuraLinux::MOVE_FORWARD :
+                 TextEditCommandAuraLinux::MOVE_BACKWARD);
       break;
     case GTK_MOVEMENT_VISUAL_POSITIONS:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_RIGHT :
-                 TextEditCommandX11::MOVE_LEFT);
+                 TextEditCommandAuraLinux::MOVE_RIGHT :
+                 TextEditCommandAuraLinux::MOVE_LEFT);
       break;
     case GTK_MOVEMENT_WORDS:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_WORD_RIGHT :
-                 TextEditCommandX11::MOVE_WORD_LEFT);
+                 TextEditCommandAuraLinux::MOVE_WORD_RIGHT :
+                 TextEditCommandAuraLinux::MOVE_WORD_LEFT);
       break;
     case GTK_MOVEMENT_DISPLAY_LINES:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_DOWN : TextEditCommandX11::MOVE_UP);
+                 TextEditCommandAuraLinux::MOVE_DOWN : TextEditCommandAuraLinux::MOVE_UP);
       break;
     case GTK_MOVEMENT_DISPLAY_LINE_ENDS:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_TO_END_OF_LINE :
-                 TextEditCommandX11::MOVE_TO_BEGINING_OF_LINE);
+                 TextEditCommandAuraLinux::MOVE_TO_END_OF_LINE :
+                 TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_LINE);
       break;
     case GTK_MOVEMENT_PARAGRAPH_ENDS:
       command = (count > 0 ?
-                 TextEditCommandX11::MOVE_TO_END_OF_PARAGRAPH :
-                 TextEditCommandX11::MOVE_TO_BEGINING_OF_PARAGRAPH);
+                 TextEditCommandAuraLinux::MOVE_TO_END_OF_PARAGRAPH :
+                 TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_PARAGRAPH);
       break;
     case GTK_MOVEMENT_PAGES:
-      command = (count > 0 ? TextEditCommandX11::MOVE_PAGE_DOWN :
-                 TextEditCommandX11::MOVE_PAGE_UP);
+      command = (count > 0 ? TextEditCommandAuraLinux::MOVE_PAGE_DOWN :
+                 TextEditCommandAuraLinux::MOVE_PAGE_UP);
       break;
     case GTK_MOVEMENT_BUFFER_ENDS:
-      command = (count > 0 ? TextEditCommandX11::MOVE_TO_END_OF_DOCUMENT :
-                 TextEditCommandX11::MOVE_TO_BEGINING_OF_DOCUMENT);
+      command = (count > 0 ? TextEditCommandAuraLinux::MOVE_TO_END_OF_DOCUMENT :
+                 TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_DOCUMENT);
       break;
     default:
       // GTK_MOVEMENT_PARAGRAPHS and GTK_MOVEMENT_HORIZONTAL_PAGES have
@@ -348,23 +350,23 @@ void Gtk2KeyBindingsHandler::MoveViewport(

 void Gtk2KeyBindingsHandler::PasteClipboard(GtkTextView* text_view) {
   GetHandlerOwner(text_view)->EditCommandMatched(
-      TextEditCommandX11::PASTE, std::string(), false);
+      TextEditCommandAuraLinux::PASTE, std::string(), false);
 }

 void Gtk2KeyBindingsHandler::SelectAll(GtkTextView* text_view,
                                        gboolean select) {
   if (select) {
     GetHandlerOwner(text_view)->EditCommandMatched(
-        TextEditCommandX11::SELECT_ALL, std::string(), false);
+        TextEditCommandAuraLinux::SELECT_ALL, std::string(), false);
   } else {
     GetHandlerOwner(text_view)->EditCommandMatched(
-        TextEditCommandX11::UNSELECT, std::string(), false);
+        TextEditCommandAuraLinux::UNSELECT, std::string(), false);
   }
 }

 void Gtk2KeyBindingsHandler::SetAnchor(GtkTextView* text_view) {
   GetHandlerOwner(text_view)->EditCommandMatched(
-      TextEditCommandX11::SET_MARK, std::string(), false);
+      TextEditCommandAuraLinux::SET_MARK, std::string(), false);
 }

 void Gtk2KeyBindingsHandler::ToggleCursorVisible(GtkTextView* text_view) {
diff --git a/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.h b/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.h
index 57cccbc..f58cae3 100644
--- a/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.h
+++ b/chrome/browser/ui/libgtk2ui/gtk2_key_bindings_handler.h
@@ -12,7 +12,7 @@

 #include "base/event_types.h"
 #include "chrome/browser/ui/libgtk2ui/owned_widget_gtk2.h"
-#include "ui/events/x/text_edit_command_x11.h"
+#include "ui/events/linux/text_edit_command_auralinux.h"

 namespace content {
 struct NativeWebKeyboardEvent;
@@ -53,7 +53,7 @@ class Gtk2KeyBindingsHandler {
   // Edit commands matched with |event| will be stored in |edit_commands|, if
   // non-NULL.
   bool MatchEvent(const ui::Event& event,
-                  std::vector<ui::TextEditCommandX11>* commands);
+                  std::vector<ui::TextEditCommandAuraLinux>* commands);

  private:
   // Object structure of Handler class, which is derived from GtkTextView.
@@ -71,7 +71,7 @@ class Gtk2KeyBindingsHandler {
   GtkWidget* CreateNewHandler();

   // Adds an edit command to the key event.
-  void EditCommandMatched(ui::TextEditCommandX11::CommandId id,
+  void EditCommandMatched(ui::TextEditCommandAuraLinux::CommandId id,
                           const std::string& value,
                           bool extend_selection);

@@ -141,7 +141,7 @@ class Gtk2KeyBindingsHandler {
   libgtk2ui::OwnedWidgetGtk handler_;

   // Buffer to store the match results.
-  std::vector<ui::TextEditCommandX11> edit_commands_;
+  std::vector<ui::TextEditCommandAuraLinux> edit_commands_;

   // Whether the current X server has the XKeyboard extension.
   bool has_xkb_;
diff --git a/chrome/browser/ui/libgtk2ui/gtk2_ui.cc b/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
index 956c0b4..f7bcb45 100644
--- a/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
+++ b/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
@@ -681,7 +681,7 @@ void Gtk2UI::NotifyWindowManagerStartupComplete() {
 }

 bool Gtk2UI::MatchEvent(const ui::Event& event,
-                        std::vector<ui::TextEditCommandX11>* commands) {
+                        std::vector<ui::TextEditCommandAuraLinux>* commands) {
   // Ensure that we have a keyboard handler.
   if (!key_bindings_handler_)
     key_bindings_handler_.reset(new Gtk2KeyBindingsHandler);
diff --git a/chrome/browser/ui/libgtk2ui/gtk2_ui.h b/chrome/browser/ui/libgtk2ui/gtk2_ui.h
index 49408fa..5dbbda9 100644
--- a/chrome/browser/ui/libgtk2ui/gtk2_ui.h
+++ b/chrome/browser/ui/libgtk2ui/gtk2_ui.h
@@ -15,7 +15,7 @@
 #include "chrome/browser/ui/libgtk2ui/gtk2_signal_registrar.h"
 #include "chrome/browser/ui/libgtk2ui/libgtk2ui_export.h"
 #include "chrome/browser/ui/libgtk2ui/owned_widget_gtk2.h"
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
+#include "ui/events/linux/text_edit_key_bindings_delegate_auralinux.h"
 #include "ui/gfx/color_utils.h"
 #include "ui/gfx/geometry/insets.h"
 #include "ui/views/linux_ui/linux_ui.h"
@@ -115,7 +115,7 @@ class Gtk2UI : public views::LinuxUI {
   // ui::TextEditKeybindingDelegate:
   virtual bool MatchEvent(
       const ui::Event& event,
-      std::vector<ui::TextEditCommandX11>* commands) OVERRIDE;
+      std::vector<ui::TextEditCommandAuraLinux>* commands) OVERRIDE;

  private:
   typedef std::map<int, SkColor> ColorMap;
diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
index 8493660..f8602f2 100644
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -96,8 +96,8 @@

 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
 #include "content/common/input_messages.h"
-#include "ui/events/x/text_edit_command_x11.h"
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
+#include "ui/events/linux/text_edit_command_auralinux.h"
+#include "ui/events/linux/text_edit_key_bindings_delegate_auralinux.h"
 #endif

 using gfx::RectToSkIRect;
@@ -3578,16 +3578,16 @@ void RenderWidgetHostViewAura::DetachFromInputMethod() {
 void RenderWidgetHostViewAura::ForwardKeyboardEvent(
     const NativeWebKeyboardEvent& event) {
 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
-  ui::TextEditKeyBindingsDelegateX11* keybinding_delegate =
+  ui::TextEditKeyBindingsDelegateAuraLinux* keybinding_delegate =
       ui::GetTextEditKeyBindingsDelegate();
-  std::vector<ui::TextEditCommandX11> commands;
+  std::vector<ui::TextEditCommandAuraLinux> commands;
   if (!event.skip_in_browser &&
       keybinding_delegate &&
       event.os_event &&
       keybinding_delegate->MatchEvent(*event.os_event, &commands)) {
     // Transform from ui/ types to content/ types.
     EditCommands edit_commands;
-    for (std::vector<ui::TextEditCommandX11>::const_iterator it =
+    for (std::vector<ui::TextEditCommandAuraLinux>::const_iterator it =
              commands.begin(); it != commands.end(); ++it) {
       edit_commands.push_back(EditCommand(it->GetCommandString(),
                                           it->argument()));
diff --git a/ui/events/events.gyp b/ui/events/events.gyp
index 979b2e3..a51a353 100644
--- a/ui/events/events.gyp
+++ b/ui/events/events.gyp
@@ -148,10 +148,10 @@
         'platform/x11/x11_event_source.h',
         'win/events_win.cc',
         'x/events_x.cc',
-        'x/text_edit_command_x11.cc',
-        'x/text_edit_command_x11.h',
-        'x/text_edit_key_bindings_delegate_x11.cc',
-        'x/text_edit_key_bindings_delegate_x11.h',
+        'linux/text_edit_command_auralinux.cc',
+        'linux/text_edit_command_auralinux.h',
+        'linux/text_edit_key_bindings_delegate_auralinux.cc',
+        'linux/text_edit_key_bindings_delegate_auralinux.h',
       ],
       'conditions': [
         # We explicitly enumerate the platforms we _do_ provide native cracking
@@ -163,10 +163,10 @@
         }],
         ['chromeos==1', {
           'sources!': [
-            'x/text_edit_command_x11.cc',
-            'x/text_edit_command_x11.h',
-            'x/text_edit_key_bindings_delegate_x11.cc',
-            'x/text_edit_key_bindings_delegate_x11.h',
+            'linux/text_edit_command_auralinux.cc',
+            'linux/text_edit_command_auralinux.h',
+            'linux/text_edit_key_bindings_delegate_auralinux.cc',
+            'linux/text_edit_key_bindings_delegate_auralinux.h',
           ],
         }],
         ['use_x11==1', {
diff --git a/ui/events/x/text_edit_command_x11.cc b/ui/events/x/text_edit_command_x11.cc
deleted file mode 100644
index 1a39ff8..0000000
--- a/ui/events/x/text_edit_command_x11.cc
+++ /dev/null
@@ -1,125 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "ui/events/x/text_edit_command_x11.h"
-
-#include "base/logging.h"
-
-namespace ui {
-
-std::string TextEditCommandX11::GetCommandString() const {
-  std::string base_name;
-  switch (command_id_) {
-    case COPY:
-      base_name = "Copy";
-      break;
-    case CUT:
-      base_name = "Cut";
-      break;
-    case DELETE_BACKWARD:
-      base_name = "DeleteBackward";
-      break;
-    case DELETE_FORWARD:
-      base_name = "DeleteForward";
-      break;
-    case DELETE_TO_BEGINING_OF_LINE:
-      base_name = "DeleteToBeginningOfLine";
-      break;
-    case DELETE_TO_BEGINING_OF_PARAGRAPH:
-      base_name = "DeleteToBeginningOfParagraph";
-      break;
-    case DELETE_TO_END_OF_LINE:
-      base_name = "DeleteToEndOfLine";
-      break;
-    case DELETE_TO_END_OF_PARAGRAPH:
-      base_name = "DeleteToEndOfParagraph";
-      break;
-    case DELETE_WORD_BACKWARD:
-      base_name = "DeleteWordBackward";
-      break;
-    case DELETE_WORD_FORWARD:
-      base_name = "DeleteWordForward";
-      break;
-    case INSERT_TEXT:
-      base_name = "InsertText";
-      break;
-    case MOVE_BACKWARD:
-      base_name = "MoveBackward";
-      break;
-    case MOVE_DOWN:
-      base_name = "MoveDown";
-      break;
-    case MOVE_FORWARD:
-      base_name = "MoveForward";
-      break;
-    case MOVE_LEFT:
-      base_name = "MoveLeft";
-      break;
-    case MOVE_PAGE_DOWN:
-      base_name = "MovePageDown";
-      break;
-    case MOVE_PAGE_UP:
-      base_name = "MovePageUp";
-      break;
-    case MOVE_RIGHT:
-      base_name = "MoveRight";
-      break;
-    case MOVE_TO_BEGINING_OF_DOCUMENT:
-      base_name = "MoveToBeginningOfDocument";
-      break;
-    case MOVE_TO_BEGINING_OF_LINE:
-      base_name = "MoveToBeginningOfLine";
-      break;
-    case MOVE_TO_BEGINING_OF_PARAGRAPH:
-      base_name = "MoveToBeginningOfParagraph";
-      break;
-    case MOVE_TO_END_OF_DOCUMENT:
-      base_name = "MoveToEndOfDocument";
-      break;
-    case MOVE_TO_END_OF_LINE:
-      base_name = "MoveToEndOfLine";
-      break;
-    case MOVE_TO_END_OF_PARAGRAPH:
-      base_name = "MoveToEndOfParagraph";
-      break;
-    case MOVE_UP:
-      base_name = "MoveUp";
-      break;
-    case MOVE_WORD_BACKWARD:
-      base_name = "MoveWordBackward";
-      break;
-    case MOVE_WORD_FORWARD:
-      base_name = "MoveWordForward";
-      break;
-    case MOVE_WORD_LEFT:
-      base_name = "MoveWordLeft";
-      break;
-    case MOVE_WORD_RIGHT:
-      base_name = "MoveWordRight";
-      break;
-    case PASTE:
-      base_name = "Paste";
-      break;
-    case SELECT_ALL:
-      base_name = "SelectAll";
-      break;
-    case SET_MARK:
-      base_name = "SetMark";
-      break;
-    case UNSELECT:
-      base_name = "Unselect";
-      break;
-    case INVALID_COMMAND:
-      NOTREACHED();
-      return std::string();
-  }
-
-  if (extend_selection())
-    base_name += "AndModifySelection";
-
-  return base_name;
-}
-
-}  // namespace ui
-
diff --git a/ui/events/x/text_edit_command_x11.h b/ui/events/x/text_edit_command_x11.h
deleted file mode 100644
index ff4ace1..0000000
--- a/ui/events/x/text_edit_command_x11.h
+++ /dev/null
@@ -1,82 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef UI_EVENTS_X_TEXT_EDIT_COMMAND_X11_H_
-#define UI_EVENTS_X_TEXT_EDIT_COMMAND_X11_H_
-
-#include <string>
-
-#include "ui/events/events_export.h"
-
-namespace ui {
-
-// Represents a command that performs a specific operation on text.
-// Copy and assignment are explicitly allowed; these objects live in vectors.
-class EVENTS_EXPORT TextEditCommandX11 {
- public:
-  enum CommandId {
-    COPY,
-    CUT,
-    DELETE_BACKWARD,
-    DELETE_FORWARD,
-    DELETE_TO_BEGINING_OF_LINE,
-    DELETE_TO_BEGINING_OF_PARAGRAPH,
-    DELETE_TO_END_OF_LINE,
-    DELETE_TO_END_OF_PARAGRAPH,
-    DELETE_WORD_BACKWARD,
-    DELETE_WORD_FORWARD,
-    INSERT_TEXT,
-    MOVE_BACKWARD,
-    MOVE_DOWN,
-    MOVE_FORWARD,
-    MOVE_LEFT,
-    MOVE_PAGE_DOWN,
-    MOVE_PAGE_UP,
-    MOVE_RIGHT,
-    MOVE_TO_BEGINING_OF_DOCUMENT,
-    MOVE_TO_BEGINING_OF_LINE,
-    MOVE_TO_BEGINING_OF_PARAGRAPH,
-    MOVE_TO_END_OF_DOCUMENT,
-    MOVE_TO_END_OF_LINE,
-    MOVE_TO_END_OF_PARAGRAPH,
-    MOVE_UP,
-    MOVE_WORD_BACKWARD,
-    MOVE_WORD_FORWARD,
-    MOVE_WORD_LEFT,
-    MOVE_WORD_RIGHT,
-    PASTE,
-    SELECT_ALL,
-    SET_MARK,
-    UNSELECT,
-    INVALID_COMMAND
-  };
-
-  TextEditCommandX11(CommandId command_id,
-                     const std::string& argument,
-                     bool extend_selection)
-      : command_id_(command_id),
-        argument_(argument),
-        extend_selection_(extend_selection) {}
-
-  CommandId command_id() const { return command_id_; }
-  const std::string& argument() const { return argument_; }
-  bool extend_selection() const { return extend_selection_; }
-
-  // We communicate these commands back to blink with a string representation.
-  // This will combine the base command name with "AndModifySelection" if we
-  // have |extend_selection_| set.
-  std::string GetCommandString() const;
-
- private:
-  CommandId command_id_;
-
-  std::string argument_;
-
-  // In addition to executing the command, modify the selection.
-  bool extend_selection_;
-};
-
-}  // namespace ui
-
-#endif  // UI_EVENTS_X_TEXT_EDIT_COMMAND_X11_H_
diff --git a/ui/events/x/text_edit_key_bindings_delegate_x11.cc b/ui/events/x/text_edit_key_bindings_delegate_x11.cc
deleted file mode 100644
index 33e8c58..0000000
--- a/ui/events/x/text_edit_key_bindings_delegate_x11.cc
+++ /dev/null
@@ -1,22 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
-
-namespace ui {
-
-namespace {
-// Optional delegate. Unowned pointer.
-TextEditKeyBindingsDelegateX11* text_edit_keybinding_delegate_ = 0;
-}
-
-void SetTextEditKeyBindingsDelegate(TextEditKeyBindingsDelegateX11* delegate) {
-  text_edit_keybinding_delegate_ = delegate;
-}
-
-TextEditKeyBindingsDelegateX11* GetTextEditKeyBindingsDelegate() {
-  return text_edit_keybinding_delegate_;
-}
-
-}  // namespace ui
diff --git a/ui/events/x/text_edit_key_bindings_delegate_x11.h b/ui/events/x/text_edit_key_bindings_delegate_x11.h
deleted file mode 100644
index 7cfe66a..0000000
--- a/ui/events/x/text_edit_key_bindings_delegate_x11.h
+++ /dev/null
@@ -1,42 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef UI_EVENTS_X_TEXT_EDIT_KEY_BINDINGS_DELEGATE_X11_H_
-#define UI_EVENTS_X_TEXT_EDIT_KEY_BINDINGS_DELEGATE_X11_H_
-
-#include <vector>
-
-#include "ui/events/events_export.h"
-
-namespace ui {
-class Event;
-class TextEditCommandX11;
-
-// An interface which can interpret various text editing commands out of key
-// events.
-//
-// On desktop Linux, we've traditionally supported the user's custom
-// keybindings. We need to support this in both content/ and in views/.
-class EVENTS_EXPORT TextEditKeyBindingsDelegateX11 {
- public:
-  // Matches a key event against the users' platform specific key bindings,
-  // false will be returned if the key event doesn't correspond to a predefined
-  // key binding.  Edit commands matched with |event| will be stored in
-  // |edit_commands|, if |edit_commands| is non-NULL.
-  virtual bool MatchEvent(const ui::Event& event,
-                          std::vector<TextEditCommandX11>* commands) = 0;
-
- protected:
-  virtual ~TextEditKeyBindingsDelegateX11() {}
-};
-
-// Sets/Gets the global TextEditKeyBindingsDelegateX11. No ownership
-// changes. Can be NULL.
-EVENTS_EXPORT void SetTextEditKeyBindingsDelegate(
-    TextEditKeyBindingsDelegateX11* delegate);
-EVENTS_EXPORT TextEditKeyBindingsDelegateX11* GetTextEditKeyBindingsDelegate();
-
-}  // namespace ui
-
-#endif  // UI_EVENTS_X_TEXT_EDIT_KEY_BINDINGS_DELEGATE_X11_H_
diff --git a/ui/views/controls/textfield/textfield.cc b/ui/views/controls/textfield/textfield.cc
index d340c75..c9836d3 100644
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -42,8 +42,8 @@

 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
 #include "base/strings/utf_string_conversions.h"
-#include "ui/events/x/text_edit_command_x11.h"
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
+#include "ui/events/linux/text_edit_command_auralinux.h"
+#include "ui/events/linux/text_edit_key_bindings_delegate_auralinux.h"
 #endif

 namespace views {
@@ -136,85 +136,85 @@ int GetCommandForKeyEvent(const ui::KeyEvent& event, bool has_selection) {
 }

 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
-int GetViewsCommand(const ui::TextEditCommandX11& command, bool rtl) {
+int GetViewsCommand(const ui::TextEditCommandAuraLinux& command, bool rtl) {
   const bool select = command.extend_selection();
   switch (command.command_id()) {
-    case ui::TextEditCommandX11::COPY:
+    case ui::TextEditCommandAuraLinux::COPY:
       return IDS_APP_COPY;
-    case ui::TextEditCommandX11::CUT:
+    case ui::TextEditCommandAuraLinux::CUT:
       return IDS_APP_CUT;
-    case ui::TextEditCommandX11::DELETE_BACKWARD:
+    case ui::TextEditCommandAuraLinux::DELETE_BACKWARD:
       return IDS_DELETE_BACKWARD;
-    case ui::TextEditCommandX11::DELETE_FORWARD:
+    case ui::TextEditCommandAuraLinux::DELETE_FORWARD:
       return IDS_DELETE_FORWARD;
-    case ui::TextEditCommandX11::DELETE_TO_BEGINING_OF_LINE:
-    case ui::TextEditCommandX11::DELETE_TO_BEGINING_OF_PARAGRAPH:
+    case ui::TextEditCommandAuraLinux::DELETE_TO_BEGINING_OF_LINE:
+    case ui::TextEditCommandAuraLinux::DELETE_TO_BEGINING_OF_PARAGRAPH:
       return IDS_DELETE_TO_BEGINNING_OF_LINE;
-    case ui::TextEditCommandX11::DELETE_TO_END_OF_LINE:
-    case ui::TextEditCommandX11::DELETE_TO_END_OF_PARAGRAPH:
+    case ui::TextEditCommandAuraLinux::DELETE_TO_END_OF_LINE:
+    case ui::TextEditCommandAuraLinux::DELETE_TO_END_OF_PARAGRAPH:
       return IDS_DELETE_TO_END_OF_LINE;
-    case ui::TextEditCommandX11::DELETE_WORD_BACKWARD:
+    case ui::TextEditCommandAuraLinux::DELETE_WORD_BACKWARD:
       return IDS_DELETE_WORD_BACKWARD;
-    case ui::TextEditCommandX11::DELETE_WORD_FORWARD:
+    case ui::TextEditCommandAuraLinux::DELETE_WORD_FORWARD:
       return IDS_DELETE_WORD_FORWARD;
-    case ui::TextEditCommandX11::INSERT_TEXT:
+    case ui::TextEditCommandAuraLinux::INSERT_TEXT:
       return kNoCommand;
-    case ui::TextEditCommandX11::MOVE_BACKWARD:
+    case ui::TextEditCommandAuraLinux::MOVE_BACKWARD:
       if (rtl)
         return select ? IDS_MOVE_RIGHT_AND_MODIFY_SELECTION : IDS_MOVE_RIGHT;
       return select ? IDS_MOVE_LEFT_AND_MODIFY_SELECTION : IDS_MOVE_LEFT;
-    case ui::TextEditCommandX11::MOVE_DOWN:
+    case ui::TextEditCommandAuraLinux::MOVE_DOWN:
       return IDS_MOVE_DOWN;
-    case ui::TextEditCommandX11::MOVE_FORWARD:
+    case ui::TextEditCommandAuraLinux::MOVE_FORWARD:
       if (rtl)
         return select ? IDS_MOVE_LEFT_AND_MODIFY_SELECTION : IDS_MOVE_LEFT;
       return select ? IDS_MOVE_RIGHT_AND_MODIFY_SELECTION : IDS_MOVE_RIGHT;
-    case ui::TextEditCommandX11::MOVE_LEFT:
+    case ui::TextEditCommandAuraLinux::MOVE_LEFT:
       return select ? IDS_MOVE_LEFT_AND_MODIFY_SELECTION : IDS_MOVE_LEFT;
-    case ui::TextEditCommandX11::MOVE_PAGE_DOWN:
-    case ui::TextEditCommandX11::MOVE_PAGE_UP:
+    case ui::TextEditCommandAuraLinux::MOVE_PAGE_DOWN:
+    case ui::TextEditCommandAuraLinux::MOVE_PAGE_UP:
       return kNoCommand;
-    case ui::TextEditCommandX11::MOVE_RIGHT:
+    case ui::TextEditCommandAuraLinux::MOVE_RIGHT:
       return select ? IDS_MOVE_RIGHT_AND_MODIFY_SELECTION : IDS_MOVE_RIGHT;
-    case ui::TextEditCommandX11::MOVE_TO_BEGINING_OF_DOCUMENT:
-    case ui::TextEditCommandX11::MOVE_TO_BEGINING_OF_LINE:
-    case ui::TextEditCommandX11::MOVE_TO_BEGINING_OF_PARAGRAPH:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_DOCUMENT:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_LINE:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_BEGINING_OF_PARAGRAPH:
       return select ? IDS_MOVE_TO_BEGINNING_OF_LINE_AND_MODIFY_SELECTION :
                       IDS_MOVE_TO_BEGINNING_OF_LINE;
-    case ui::TextEditCommandX11::MOVE_TO_END_OF_DOCUMENT:
-    case ui::TextEditCommandX11::MOVE_TO_END_OF_LINE:
-    case ui::TextEditCommandX11::MOVE_TO_END_OF_PARAGRAPH:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_END_OF_DOCUMENT:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_END_OF_LINE:
+    case ui::TextEditCommandAuraLinux::MOVE_TO_END_OF_PARAGRAPH:
       return select ? IDS_MOVE_TO_END_OF_LINE_AND_MODIFY_SELECTION :
                       IDS_MOVE_TO_END_OF_LINE;
-    case ui::TextEditCommandX11::MOVE_UP:
+    case ui::TextEditCommandAuraLinux::MOVE_UP:
       return IDS_MOVE_UP;
-    case ui::TextEditCommandX11::MOVE_WORD_BACKWARD:
+    case ui::TextEditCommandAuraLinux::MOVE_WORD_BACKWARD:
       if (rtl) {
         return select ? IDS_MOVE_WORD_RIGHT_AND_MODIFY_SELECTION :
                         IDS_MOVE_WORD_RIGHT;
       }
       return select ? IDS_MOVE_WORD_LEFT_AND_MODIFY_SELECTION :
                       IDS_MOVE_WORD_LEFT;
-    case ui::TextEditCommandX11::MOVE_WORD_FORWARD:
+    case ui::TextEditCommandAuraLinux::MOVE_WORD_FORWARD:
       if (rtl) {
         return select ? IDS_MOVE_WORD_LEFT_AND_MODIFY_SELECTION :
                         IDS_MOVE_WORD_LEFT;
       }
       return select ? IDS_MOVE_WORD_RIGHT_AND_MODIFY_SELECTION :
                       IDS_MOVE_WORD_RIGHT;
-    case ui::TextEditCommandX11::MOVE_WORD_LEFT:
+    case ui::TextEditCommandAuraLinux::MOVE_WORD_LEFT:
       return select ? IDS_MOVE_WORD_LEFT_AND_MODIFY_SELECTION :
                       IDS_MOVE_WORD_LEFT;
-    case ui::TextEditCommandX11::MOVE_WORD_RIGHT:
+    case ui::TextEditCommandAuraLinux::MOVE_WORD_RIGHT:
       return select ? IDS_MOVE_WORD_RIGHT_AND_MODIFY_SELECTION :
                       IDS_MOVE_WORD_RIGHT;
-    case ui::TextEditCommandX11::PASTE:
+    case ui::TextEditCommandAuraLinux::PASTE:
       return IDS_APP_PASTE;
-    case ui::TextEditCommandX11::SELECT_ALL:
+    case ui::TextEditCommandAuraLinux::SELECT_ALL:
       return IDS_APP_SELECT_ALL;
-    case ui::TextEditCommandX11::SET_MARK:
-    case ui::TextEditCommandX11::UNSELECT:
-    case ui::TextEditCommandX11::INVALID_COMMAND:
+    case ui::TextEditCommandAuraLinux::SET_MARK:
+    case ui::TextEditCommandAuraLinux::UNSELECT:
+    case ui::TextEditCommandAuraLinux::INVALID_COMMAND:
       return kNoCommand;
   }
   return kNoCommand;
@@ -592,9 +592,9 @@ bool Textfield::OnKeyPressed(const ui::KeyEvent& event) {
     return true;

 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
-  ui::TextEditKeyBindingsDelegateX11* delegate =
+  ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
       ui::GetTextEditKeyBindingsDelegate();
-  std::vector<ui::TextEditCommandX11> commands;
+  std::vector<ui::TextEditCommandAuraLinux> commands;
   if (delegate) {
     if (!delegate->MatchEvent(event, &commands))
       return false;
@@ -710,9 +710,9 @@ void Textfield::AboutToRequestFocusFromTabTraversal(bool reverse) {
 bool Textfield::SkipDefaultKeyEventProcessing(const ui::KeyEvent& event) {
 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
   // Skip any accelerator handling that conflicts with custom keybindings.
-  ui::TextEditKeyBindingsDelegateX11* delegate =
+  ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
       ui::GetTextEditKeyBindingsDelegate();
-  std::vector<ui::TextEditCommandX11> commands;
+  std::vector<ui::TextEditCommandAuraLinux> commands;
   if (delegate && delegate->MatchEvent(event, &commands)) {
     const bool rtl = GetTextDirection() == base::i18n::RIGHT_TO_LEFT;
     for (size_t i = 0; i < commands.size(); ++i)
diff --git a/ui/views/linux_ui/linux_ui.h b/ui/views/linux_ui/linux_ui.h
index 5a2ea10..563a518 100644
--- a/ui/views/linux_ui/linux_ui.h
+++ b/ui/views/linux_ui/linux_ui.h
@@ -9,7 +9,7 @@

 #include "third_party/skia/include/core/SkColor.h"
 #include "ui/base/ime/linux/linux_input_method_context_factory.h"
-#include "ui/events/x/text_edit_key_bindings_delegate_x11.h"
+#include "ui/events/linux/text_edit_key_bindings_delegate_auralinux.h"
 #include "ui/gfx/linux_font_delegate.h"
 #include "ui/shell_dialogs/linux_shell_dialog.h"
 #include "ui/views/controls/button/button.h"
@@ -44,7 +44,7 @@ class WindowButtonOrderObserver;
 class VIEWS_EXPORT LinuxUI : public ui::LinuxInputMethodContextFactory,
                              public gfx::LinuxFontDelegate,
                              public ui::LinuxShellDialog,
-                             public ui::TextEditKeyBindingsDelegateX11 {
+                             public ui::TextEditKeyBindingsDelegateAuraLinux {
  public:
   virtual ~LinuxUI() {}

--
1.7.9.5
