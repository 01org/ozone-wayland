From d21caeca998edf5a86d646bd105849627676de8c Mon Sep 17 00:00:00 2001
From: Kalyan Kondapally <kalyan.kondapally@intel.com>
Date: Sat, 6 Sep 2014 17:02:07 -0700
Subject: [PATCH] Fix Ozone build on Linux platform.

https://codereview.chromium.org/510323002/ Disable scoped_refptr
operator T* on Linux. This CL fixes Ozone build on Linux.
---
 .../cursor/ozone/bitmap_cursor_factory_ozone.cc    |    6 +++---
 ui/events/ozone/evdev/event_factory_evdev.cc       |    2 +-
 ...pu_memory_buffer_factory_ozone_native_buffer.cc |    2 +-
 ui/ozone/platform/dri/dri_cursor.cc                |    6 +++---
 ui/ozone/platform/dri/dri_surface.cc               |    2 +-
 .../platform/dri/hardware_display_controller.cc    |    6 +++---
 ui/ozone/platform/dri/screen_manager.cc            |    2 +-
 7 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/ui/base/cursor/ozone/bitmap_cursor_factory_ozone.cc b/ui/base/cursor/ozone/bitmap_cursor_factory_ozone.cc
index 394ec7a..9787bd1 100644
--- a/ui/base/cursor/ozone/bitmap_cursor_factory_ozone.cc
+++ b/ui/base/cursor/ozone/bitmap_cursor_factory_ozone.cc
@@ -41,7 +41,7 @@ scoped_refptr<BitmapCursorOzone> BitmapCursorFactoryOzone::GetBitmapCursor(
 }
 
 PlatformCursor BitmapCursorFactoryOzone::GetDefaultCursor(int type) {
-  return GetDefaultCursorInternal(type);
+  return GetDefaultCursorInternal(type).get();
 }
 
 PlatformCursor BitmapCursorFactoryOzone::CreateImageCursor(
@@ -69,9 +69,9 @@ BitmapCursorFactoryOzone::GetDefaultCursorInternal(int type) {
     // Create new image cursor from default aura bitmap for this type. We hold a
     // ref forever because clients do not do refcounting for default cursors.
     scoped_refptr<BitmapCursorOzone> cursor = CreateDefaultBitmapCursor(type);
-    if (!cursor && type != kCursorPointer)
+    if (!cursor.get() && type != kCursorPointer)
       cursor = GetDefaultCursorInternal(kCursorPointer);
-    DCHECK(cursor) << "Failed to load default cursor bitmap";
+    DCHECK(cursor.get()) << "Failed to load default cursor bitmap";
     default_cursors_[type] = cursor;
   }
 
diff --git a/ui/events/ozone/evdev/event_factory_evdev.cc b/ui/events/ozone/evdev/event_factory_evdev.cc
index 378ac52..d3ba4ba 100644
--- a/ui/events/ozone/evdev/event_factory_evdev.cc
+++ b/ui/events/ozone/evdev/event_factory_evdev.cc
@@ -198,7 +198,7 @@ void EventFactoryEvdev::OnDeviceEvent(const DeviceEvent& event) {
 }
 
 void EventFactoryEvdev::OnDispatcherListChanged() {
-  if (!ui_task_runner_) {
+  if (!ui_task_runner_.get()) {
     ui_task_runner_ = base::ThreadTaskRunnerHandle::Get();
     // Scan & monitor devices.
     device_manager_->AddObserver(this);
diff --git a/ui/ozone/gpu/gpu_memory_buffer_factory_ozone_native_buffer.cc b/ui/ozone/gpu/gpu_memory_buffer_factory_ozone_native_buffer.cc
index 3e293e9..6953185 100644
--- a/ui/ozone/gpu/gpu_memory_buffer_factory_ozone_native_buffer.cc
+++ b/ui/ozone/gpu/gpu_memory_buffer_factory_ozone_native_buffer.cc
@@ -74,7 +74,7 @@ bool GpuMemoryBufferFactoryOzoneNativeBuffer::CreateGpuMemoryBuffer(
   scoped_refptr<NativePixmap> pixmap =
       SurfaceFactoryOzone::GetInstance()->CreateNativePixmap(
           size, GetOzoneFormatFor(internalformat));
-  if (!pixmap) {
+  if (!pixmap.get()) {
     LOG(ERROR) << "Failed to create pixmap " << size.width() << "x"
                << size.height() << " format " << internalformat << ", usage "
                << usage;
diff --git a/ui/ozone/platform/dri/dri_cursor.cc b/ui/ozone/platform/dri/dri_cursor.cc
index f2f71c2..18260b9 100644
--- a/ui/ozone/platform/dri/dri_cursor.cc
+++ b/ui/ozone/platform/dri/dri_cursor.cc
@@ -31,7 +31,7 @@ void DriCursor::SetCursor(gfx::AcceleratedWidget widget,
     return;
 
   cursor_ = cursor;
-  if (cursor_)
+  if (cursor_.get())
     hardware_->SetHardwareCursor(
         cursor_window_, cursor_->bitmap(), bitmap_location());
   else
@@ -50,7 +50,7 @@ void DriCursor::MoveCursorTo(gfx::AcceleratedWidget widget,
   cursor_location_.SetToMax(gfx::PointF(0, 0));
   cursor_location_.SetToMin(gfx::PointF(size.width(), size.height()));
 
-  if (cursor_)
+  if (cursor_.get())
     hardware_->MoveHardwareCursor(cursor_window_, bitmap_location());
 }
 
@@ -63,7 +63,7 @@ gfx::AcceleratedWidget DriCursor::GetCursorWindow() {
 }
 
 bool DriCursor::IsCursorVisible() {
-  return cursor_;
+  return cursor_.get();
 }
 
 gfx::PointF DriCursor::location() {
diff --git a/ui/ozone/platform/dri/dri_surface.cc b/ui/ozone/platform/dri/dri_surface.cc
index dc166fd..0456b79 100644
--- a/ui/ozone/platform/dri/dri_surface.cc
+++ b/ui/ozone/platform/dri/dri_surface.cc
@@ -64,7 +64,7 @@ void DriSurface::ResizeCanvas(const gfx::Size& viewport_size) {
 
 void DriSurface::PresentCanvas(const gfx::Rect& damage) {
   DCHECK(base::MessageLoopForUI::IsCurrent());
-  DCHECK(buffers_[front_buffer_ ^ 1]);
+  DCHECK(buffers_[front_buffer_ ^ 1].get());
 
   HardwareDisplayController* controller = window_delegate_->GetController();
   if (!controller)
diff --git a/ui/ozone/platform/dri/hardware_display_controller.cc b/ui/ozone/platform/dri/hardware_display_controller.cc
index cead949..7d41188 100644
--- a/ui/ozone/platform/dri/hardware_display_controller.cc
+++ b/ui/ozone/platform/dri/hardware_display_controller.cc
@@ -96,7 +96,7 @@ HardwareDisplayController::~HardwareDisplayController() {
 bool HardwareDisplayController::Modeset(const OverlayPlane& primary,
                                         drmModeModeInfo mode) {
   TRACE_EVENT0("dri", "HDC::Modeset");
-  DCHECK(primary.buffer);
+  DCHECK(primary.buffer.get());
   pending_page_flips_ = 0;
   bool status = true;
   for (size_t i = 0; i < crtc_states_.size(); ++i) {
@@ -117,7 +117,7 @@ bool HardwareDisplayController::Enable() {
   TRACE_EVENT0("dri", "HDC::Enable");
   DCHECK(!current_planes_.empty());
   OverlayPlane primary = GetPrimaryPlane(current_planes_);
-  DCHECK(primary.buffer);
+  DCHECK(primary.buffer.get());
   pending_page_flips_ = 0;
   bool status = true;
   for (size_t i = 0; i < crtc_states_.size(); ++i)
@@ -286,7 +286,7 @@ bool HardwareDisplayController::SchedulePageFlipOnCrtc(
     const OverlayPlaneList& overlays,
     CrtcState* state) {
   const OverlayPlane& primary = GetPrimaryPlane(overlays);
-  DCHECK(primary.buffer);
+  DCHECK(primary.buffer.get());
 
   if (primary.buffer->GetSize() != gfx::Size(mode_.hdisplay, mode_.vdisplay)) {
     LOG(WARNING) << "Trying to pageflip a buffer with the wrong size. Expected "
diff --git a/ui/ozone/platform/dri/screen_manager.cc b/ui/ozone/platform/dri/screen_manager.cc
index f14b086..fa0ad3d 100644
--- a/ui/ozone/platform/dri/screen_manager.cc
+++ b/ui/ozone/platform/dri/screen_manager.cc
@@ -175,7 +175,7 @@ bool ScreenManager::ModesetDisplayController(
   scoped_refptr<ScanoutBuffer> buffer =
       buffer_generator_->Create(gfx::Size(mode.hdisplay, mode.vdisplay));
 
-  if (!buffer) {
+  if (!buffer.get()) {
     LOG(ERROR) << "Failed to create scanout buffer";
     return false;
   }
-- 
1.7.9.5

