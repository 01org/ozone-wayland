From 680c2e47348f5d51cd0d3567d8b9bbfa0716ac98 Mon Sep 17 00:00:00 2001
From: "spang@chromium.org"
 <spang@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>
Date: Fri, 6 Jun 2014 17:02:29 +0000
Subject: [PATCH 1/3] ozone: Implement PlatformObject<T> for platform-specific
 objects

This paves the way for having more than one platform-specific object,
which is necessary for the componentization of ozone.

The plumbing to build objects that depend on the platform is shared
using the PlatformObject<T> template.

Code that wants to build such an object need simply do

  scoped_ptr<MyPlatformSpecificType> my_platform_object =
      PlatformObject<MyPlatformSpecificType>::Create();

We have to generate a couple of source files to make this work:

  - a header file with an enumeration of platforms
  - a (per-component) source file with a static const list of
    constructors for each platform type

This converts the previous object (OzonePlatform) instantiation
to use PlatformObject<>. This should be functionally identical.

BUG=380884
TEST=build aura_builder with "use_ozone=1 chromeos=1", ran egltest
NOTRY=true

Review URL: https://codereview.chromium.org/313963007

git-svn-id: svn://svn.chromium.org/chrome/trunk/src@275460 0039d316-1c4b-4281-b951-d872f2087c98
---
 ui/ozone/generate_constructor_list.py    |  169 ++++++++++++++++++++++++++++++
 ui/ozone/generate_ozone_platform_list.py |  142 +++++++++++++++++++------
 ui/ozone/ozone.gyp                       |   45 +++++++-
 ui/ozone/ozone_platform.cc               |   36 ++-----
 ui/ozone/ozone_platform_list.h           |   25 -----
 ui/ozone/platform_constructor_list.h     |   21 ++++
 ui/ozone/platform_object.h               |   34 ++++++
 ui/ozone/platform_object_internal.h      |   31 ++++++
 ui/ozone/platform_selection.cc           |   50 +++++++++
 ui/ozone/platform_selection.h            |   21 ++++
 10 files changed, 487 insertions(+), 87 deletions(-)
 create mode 100755 ui/ozone/generate_constructor_list.py
 delete mode 100644 ui/ozone/ozone_platform_list.h
 create mode 100644 ui/ozone/platform_constructor_list.h
 create mode 100644 ui/ozone/platform_object.h
 create mode 100644 ui/ozone/platform_object_internal.h
 create mode 100644 ui/ozone/platform_selection.cc
 create mode 100644 ui/ozone/platform_selection.h

diff --git a/ui/ozone/generate_constructor_list.py b/ui/ozone/generate_constructor_list.py
new file mode 100755
index 0000000..42a07e2
--- /dev/null
+++ b/ui/ozone/generate_constructor_list.py
@@ -0,0 +1,169 @@
+#!/usr/bin/env python
+# Copyright 2014 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+"""Code generator for PlatformObject<> constructor list.
+
+This script takes as arguments a list of platform names as a text file and
+a list of types and generates a C++ source file containing a list of
+the constructors for that object in platform order.
+
+Example Output: ./ui/ozone/generate_constructor_list.py \
+                    --platform test \
+                    --platform dri \
+                    --export OZONE_EXPORT \
+                    --namespace ui \
+                    --typename OzonePlatform \
+                    --include '"ui/ozone/ozone_platform.h"'
+
+  // DO NOT MODIFY. GENERATED BY generate_constructor_list.py
+
+  #include "ui/ozone/platform_object_internal.h"
+
+  #include "ui/ozone/ozone_platform.h"
+
+  namespace ui {
+
+  OzonePlatform* CreateOzonePlatformTest();
+  OzonePlatform* CreateOzonePlatformDri();
+
+  }  // namespace ui
+
+  namespace ui {
+
+  typedef ui::OzonePlatform* (*OzonePlatformConstructor)();
+
+  template <> const OzonePlatformConstructor
+  PlatformConstructorList<ui::OzonePlatform>::kConstructors[] = {
+    &ui::CreateOzonePlatformTest,
+    &ui::CreateOzonePlatformDri,
+  };
+
+  template class OZONE_EXPORT PlatformObject<ui::OzonePlatform>;
+
+  }  // namespace ui
+"""
+
+import optparse
+import os
+import collections
+import re
+import sys
+import string
+
+
+def GetTypedefName(typename):
+  """Determine typedef name of constructor for typename.
+
+  This is just typename + "Constructor".
+  """
+
+  return typename + 'Constructor'
+
+
+def GetConstructorName(typename, platform):
+  """Determine name of static constructor function from platform name.
+
+  This is just "Create" + typename + platform.
+  """
+
+  return 'Create' + typename + string.capitalize(platform)
+
+
+def GenerateConstructorList(out, namespace, export, typenames, platforms,
+                            includes):
+  """Generate static array containing a list of constructors."""
+
+  out.write('// DO NOT MODIFY. GENERATED BY generate_constructor_list.py\n')
+  out.write('\n')
+
+  out.write('#include "ui/ozone/platform_object_internal.h"\n')
+  out.write('\n')
+
+  for include in includes:
+    out.write('#include %(include)s\n' % {'include': include})
+  out.write('\n')
+
+  out.write('namespace %(namespace)s {\n' % {'namespace': namespace})
+  out.write('\n')
+
+  # Declarations of constructor functions.
+  for typename in typenames:
+    for platform in platforms:
+      constructor = GetConstructorName(typename, platform)
+      out.write('%(typename)s* %(constructor)s();\n'
+               % {'typename': typename,
+                  'constructor': constructor})
+    out.write('\n')
+
+  out.write('}  // namespace %(namespace)s\n' % {'namespace': namespace})
+  out.write('\n')
+
+  out.write('namespace ui {\n')
+  out.write('\n')
+
+  # Handy typedefs for constructor types.
+  for typename in typenames:
+    out.write('typedef %(typename)s* (*%(typedef)s)();\n'
+              % {'typename': namespace + '::' + typename,
+                 'typedef': GetTypedefName(typename)})
+  out.write('\n')
+
+  # The actual constructor lists.
+  for typename in typenames:
+    out.write('template <> const %(typedef)s\n'
+              % {'typedef': GetTypedefName(typename)})
+    out.write('PlatformConstructorList<%(typename)s>::kConstructors[] = {\n'
+              % {'typename': namespace + '::' + typename})
+    for platform in platforms:
+      constructor = GetConstructorName(typename, platform)
+      out.write('  &%(namespace)s::%(constructor)s,\n'
+                % {'namespace': namespace, 'constructor': constructor})
+    out.write('};\n')
+    out.write('\n')
+
+  # Exported template instantiation.
+  for typename in typenames:
+    out.write('template class %(export)s PlatformObject<%(typename)s>;\n'
+              % {'export': export, 'typename': namespace + '::' + typename})
+  out.write('\n')
+
+  out.write('}  // namespace ui\n')
+  out.write('\n')
+
+
+def main(argv):
+  parser = optparse.OptionParser()
+  parser.add_option('--namespace', default='ozone')
+  parser.add_option('--export', default='OZONE_EXPORT')
+  parser.add_option('--platform_list')
+  parser.add_option('--output_cc')
+  parser.add_option('--include', action='append', default=[])
+  parser.add_option('--platform', action='append', default=[])
+  parser.add_option('--typename', action='append', default=[])
+  options, _ = parser.parse_args(argv)
+
+  platforms = list(options.platform)
+  typenames = list(options.typename)
+  includes = list(options.include)
+
+  if options.platform_list:
+    platforms = open(options.platform_list, 'r').read().strip().split('\n')
+
+  # Write to standard output or file specified by --output_cc.
+  out_cc = sys.stdout
+  if options.output_cc:
+    out_cc = open(options.output_cc, 'wb')
+
+  GenerateConstructorList(out_cc, options.namespace, options.export,
+                          typenames, platforms, includes)
+
+  if options.output_cc:
+    out_cc.close()
+
+  return 0
+
+
+if __name__ == '__main__':
+  sys.exit(main(sys.argv[1:]))
diff --git a/ui/ozone/generate_ozone_platform_list.py b/ui/ozone/generate_ozone_platform_list.py
index df85a1e..d47c398 100755
--- a/ui/ozone/generate_ozone_platform_list.py
+++ b/ui/ozone/generate_ozone_platform_list.py
@@ -6,26 +6,47 @@
 """Code generator for Ozone platform list.
 
 This script takes as arguments a list of platform names and generates a C++
-source file containing a list of those platforms. Each list entry contains the
-name and a function pointer to the initializer for that platform.
+source file containing a list of those platforms.
+
+Each platform gets an integer identifier that is used to find objects for that
+platform (particularly constructors for platform-specific objects).
 
 Example Output: ./generate_ozone_platform_list.py --default wayland dri wayland
 
-  #include "ui/ozone/ozone_platform_list.h"
+  // platform_list.txt
+
+  wayland
+  dri
+
+  // platform_list.h
+
+  #ifndef UI_OZONE_PLATFORM_LIST_H_
+  #define UI_OZONE_PLATFORM_LIST_H_
 
   namespace ui {
 
-  OzonePlatform* CreateOzonePlatformDri();
-  OzonePlatform* CreateOzonePlatformWayland();
+  const int kPlatformWayland = 0;
+  const int kPlatformDri = 1;
 
-  const OzonePlatformListEntry kOzonePlatforms[] = {
-    { "wayland", &CreateOzonePlatformWayland },
-    { "dri", &CreateOzonePlatformDri },
-  };
+  extern const char *kPlatformNames[kPlatformCount];
+
+  }  // namespace ui
 
-  const int kOzonePlatformCount = 2;
+  // platform_list.cc
+
+  #include "ui/ozone/platform_list.h"
+
+  namespace ui {
+
+  const char *kPlatformNames[] = {
+   "wayland", // kPlatformWayland
+   "dri", // kPlatformDri
+  };
 
   }  // namespace ui
+
+  #endif  // UI_OZONE_PLATFORM_LIST_H_
+
 """
 
 import optparse
@@ -36,63 +57,118 @@ import sys
 import string
 
 
-def GetConstructorName(name):
+def GetConstantName(name):
   """Determine name of static constructor function from platform name.
 
   We just capitalize the platform name and prepend "CreateOzonePlatform".
   """
 
-  return 'CreateOzonePlatform' + string.capitalize(name)
+  return 'kPlatform' + string.capitalize(name)
 
 
-def GeneratePlatformList(out, platforms):
-  """Generate static array containing a list of ozone platforms."""
+def GeneratePlatformListText(out, platforms):
+  """Generate text file with list of platform names, in platform id order."""
+
+  for platform in platforms:
+    out.write(platform)
+    out.write('\n')
+
+  out.write('\n')
 
-  out.write('#include "ui/ozone/ozone_platform_list.h"\n')
+
+def GeneratePlatformListHeader(out, platforms):
+  """Generate ids of ozone platforms & declaration of static names array."""
+
+  out.write('// DO NOT MODIFY. GENERATED BY generate_ozone_platform_list.py\n')
+  out.write('\n')
+
+  out.write('#ifndef UI_OZONE_PLATFORM_LIST_H_\n')
+  out.write('#define UI_OZONE_PLATFORM_LIST_H_\n')
   out.write('\n')
 
   out.write('namespace ui {\n')
   out.write('\n')
 
   # Prototypes for platform initializers.
-  for platform in platforms:
-    out.write('OzonePlatform* %s();\n' % GetConstructorName(platform))
+  for plat_id, plat_name in enumerate(platforms):
+    out.write('const int %s = %d;\n' % (GetConstantName(plat_name), plat_id))
   out.write('\n')
 
-  # List of platform names and initializers.
-  out.write('const OzonePlatformListEntry kOzonePlatforms[] = {\n')
-  for platform in platforms:
-    out.write('  { "%s", &%s },\n' % (platform, GetConstructorName(platform)))
-  out.write('};\n')
+  # Platform count.
+  out.write('const int kPlatformCount = %d;\n' % len(platforms))
+  out.write('\n')
+
+  # Declaration for names list.
+  out.write('extern const char* kPlatformNames[kPlatformCount];\n')
+  out.write('\n')
+
+  out.write('}  // namespace ui\n')
+  out.write('\n')
+
+  out.write('#endif  // UI_OZONE_PLATFORM_LIST_H_\n')
+  out.write('\n')
+
+
+def GeneratePlatformListSource(out, platforms):
+  """Generate static array containing a list of ozone platforms."""
+
+  out.write('// DO NOT MODIFY. GENERATED BY generate_ozone_platform_list.py\n')
+  out.write('\n')
+
+  out.write('#include "ui/ozone/platform_list.h"\n')
+  out.write('\n')
+
+  out.write('namespace ui {\n')
   out.write('\n')
 
-  out.write('const int kOzonePlatformCount = %d;\n' % len(platforms))
+  # Definition of names list.
+  out.write('const char* kPlatformNames[] = {\n')
+
+  # Prototypes for platform initializers.
+  for plat_name in platforms:
+    out.write('    "%s",  // %s\n' % (plat_name, GetConstantName(plat_name)))
+  out.write('};\n')
   out.write('\n')
 
   out.write('}  // namespace ui\n')
+  out.write('\n')
 
 
 def main(argv):
   parser = optparse.OptionParser()
-  parser.add_option('--output_file')
+  parser.add_option('--output_cc')
+  parser.add_option('--output_h')
+  parser.add_option('--output_txt')
   parser.add_option('--default')
   options, platforms = parser.parse_args(argv)
 
-  # Write to standard output or file specified by --output_file.
-  out = sys.stdout
-  if options.output_file:
-    out = open(options.output_file, 'wb')
-
   # Reorder the platforms when --default is specified.
   # The default platform must appear first in the platform list.
   if options.default and options.default in platforms:
     platforms.remove(options.default)
     platforms.insert(0, options.default)
 
-  GeneratePlatformList(out, platforms)
-
-  if options.output_file:
-    out.close()
+  # Write to standard output or file specified by --output_{cc,h}.
+  out_cc = sys.stdout
+  out_h = sys.stdout
+  out_txt = sys.stdout
+  if options.output_cc:
+    out_cc = open(options.output_cc, 'wb')
+  if options.output_h:
+    out_h = open(options.output_h, 'wb')
+  if options.output_txt:
+    out_txt = open(options.output_txt, 'wb')
+
+  GeneratePlatformListText(out_txt, platforms)
+  GeneratePlatformListHeader(out_h, platforms)
+  GeneratePlatformListSource(out_cc, platforms)
+
+  if options.output_cc:
+    out_cc.close()
+  if options.output_h:
+    out_h.close()
+  if options.output_txt:
+    out_txt.close()
 
   return 0
 
diff --git a/ui/ozone/ozone.gyp b/ui/ozone/ozone.gyp
index 3bd833f..0eafee1 100644
--- a/ui/ozone/ozone.gyp
+++ b/ui/ozone/ozone.gyp
@@ -32,14 +32,23 @@
         'OZONE_IMPLEMENTATION',
       ],
       'variables': {
-        'platform_list_file': '<(SHARED_INTERMEDIATE_DIR)/ui/ozone/ozone_platform_list.cc',
+        'platform_list_cc_file': '<(INTERMEDIATE_DIR)/ui/ozone/platform_list.cc',
+        'platform_list_h_file': '<(SHARED_INTERMEDIATE_DIR)/ui/ozone/platform_list.h',
+        'platform_list_txt_file': '<(SHARED_INTERMEDIATE_DIR)/ui/ozone/platform_list.txt',
+        'constructor_list_cc_file': '<(INTERMEDIATE_DIR)/ui/ozone/constructor_list.cc',
         'ozone_platforms': [
           '<@(external_ozone_platforms)',
           '<@(internal_ozone_platforms)',
         ],
       },
+      'include_dirs': [
+        '<(SHARED_INTERMEDIATE_DIR)',
+      ],
       'sources': [
-        '<(platform_list_file)',
+        '<(platform_list_cc_file)',
+        '<(platform_list_h_file)',
+        '<(constructor_list_cc_file)',
+
         # common/chromeos files are excluded automatically when building with
         # chromeos=0, by exclusion rules in filename_rules.gypi due to the
         # 'chromeos' folder name.
@@ -51,6 +60,8 @@
         'ozone_platform.h',
         'ozone_switches.cc',
         'ozone_switches.h',
+        'platform_selection.cc',
+        'platform_selection.h',
         '<@(external_ozone_platform_files)',
       ],
       'actions': [
@@ -63,16 +74,42 @@
             '<(generator_path)',
           ],
           'outputs': [
-            '<(platform_list_file)',
+            '<(platform_list_cc_file)',
+            '<(platform_list_h_file)',
+            '<(platform_list_txt_file)',
           ],
           'action': [
             'python',
             '<(generator_path)',
-            '--output_file=<(platform_list_file)',
+            '--output_cc=<(platform_list_cc_file)',
+            '--output_h=<(platform_list_h_file)',
+            '--output_txt=<(platform_list_txt_file)',
             '--default=<(ozone_platform)',
             '<@(ozone_platforms)',
           ],
         },
+        {
+          'action_name': 'generate_constructor_list',
+          'variables': {
+            'generator_path': 'generate_constructor_list.py',
+          },
+          'inputs': [
+            '<(generator_path)',
+            '<(platform_list_txt_file)',
+          ],
+          'outputs': [
+            '<(constructor_list_cc_file)',
+          ],
+          'action': [
+            'python',
+            '<(generator_path)',
+            '--platform_list=<(platform_list_txt_file)',
+            '--output_cc=<(constructor_list_cc_file)',
+            '--namespace=ui',
+            '--typename=OzonePlatform',
+            '--include="ui/ozone/ozone_platform.h"'
+          ],
+        },
       ],
       'conditions': [
         ['use_udev == 0', {
diff --git a/ui/ozone/ozone_platform.cc b/ui/ozone/ozone_platform.cc
index 12925c0..3585564 100644
--- a/ui/ozone/ozone_platform.cc
+++ b/ui/ozone/ozone_platform.cc
@@ -6,8 +6,9 @@
 #include "base/debug/trace_event.h"
 #include "base/logging.h"
 #include "ui/ozone/ozone_platform.h"
-#include "ui/ozone/ozone_platform_list.h"
 #include "ui/ozone/ozone_switches.h"
+#include "ui/ozone/platform_object.h"
+#include "ui/ozone/platform_selection.h"
 
 namespace ui {
 
@@ -16,29 +17,8 @@ namespace {
 bool g_platform_initialized_ui = false;
 bool g_platform_initialized_gpu = false;
 
-// Helper to construct an OzonePlatform by name using the platform list.
-OzonePlatform* CreatePlatform(const std::string& platform_name) {
-  // Search for a matching platform in the list.
-  for (int i = 0; i < kOzonePlatformCount; ++i)
-    if (platform_name == kOzonePlatforms[i].name)
-      return kOzonePlatforms[i].constructor();
-
-  LOG(FATAL) << "Invalid ozone platform: " << platform_name;
-  return NULL;  // not reached
-}
-
-// Returns the name of the platform to use (value of --ozone-platform flag).
-std::string GetPlatformName() {
-  // The first platform is the default.
-  if (!CommandLine::ForCurrentProcess()->HasSwitch(switches::kOzonePlatform) &&
-      kOzonePlatformCount > 0)
-    return kOzonePlatforms[0].name;
-  return CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
-      switches::kOzonePlatform);
 }
 
-}  // namespace
-
 OzonePlatform::OzonePlatform() {
   CHECK(!instance_) << "There should only be a single OzonePlatform.";
   instance_ = this;
@@ -78,9 +58,15 @@ OzonePlatform* OzonePlatform::GetInstance() {
 // static
 void OzonePlatform::CreateInstance() {
   if (!instance_) {
-    std::string platform = GetPlatformName();
-    TRACE_EVENT1("ozone", "OzonePlatform::Initialize", "platform", platform);
-    CreatePlatform(platform);
+    TRACE_EVENT1("ozone",
+                 "OzonePlatform::Initialize",
+                 "platform",
+                 GetOzonePlatformName());
+    scoped_ptr<OzonePlatform> platform =
+        PlatformObject<OzonePlatform>::Create();
+
+    // TODO(spang): Currently need to leak this object.
+    CHECK_EQ(instance_, platform.release());
   }
 }
 
diff --git a/ui/ozone/ozone_platform_list.h b/ui/ozone/ozone_platform_list.h
deleted file mode 100644
index 2689c25..0000000
--- a/ui/ozone/ozone_platform_list.h
+++ /dev/null
@@ -1,25 +0,0 @@
-// Copyright 2013 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef UI_OZONE_OZONE_PLATFORM_LIST_H_
-#define UI_OZONE_OZONE_PLATFORM_LIST_H_
-
-namespace ui {
-
-class OzonePlatform;
-
-typedef OzonePlatform* (*OzonePlatformConstructor)();
-
-struct OzonePlatformListEntry {
-  const char* name;
-  OzonePlatformConstructor constructor;
-};
-
-extern const OzonePlatformListEntry kOzonePlatforms[];
-
-extern const int kOzonePlatformCount;
-
-}  // namespace ui
-
-#endif  // UI_OZONE_OZONE_PLATFORM_LIST_H_
diff --git a/ui/ozone/platform_constructor_list.h b/ui/ozone/platform_constructor_list.h
new file mode 100644
index 0000000..4f2fa98
--- /dev/null
+++ b/ui/ozone/platform_constructor_list.h
@@ -0,0 +1,21 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_CONSTRUCTOR_LIST_H_
+#define UI_OZONE_PLATFORM_CONSTRUCTOR_LIST_H_
+
+#include "base/memory/scoped_ptr.h"
+#include "ui/ozone/platform_list.h"
+
+namespace ui {
+
+template <class T>
+struct PlatformConstructorList {
+  typedef T* (*Constructor)();
+  static const Constructor kConstructors[kPlatformCount];
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_CONSTRUCTOR_LIST_H_
diff --git a/ui/ozone/platform_object.h b/ui/ozone/platform_object.h
new file mode 100644
index 0000000..3d3a65a
--- /dev/null
+++ b/ui/ozone/platform_object.h
@@ -0,0 +1,34 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_OBJECT_H_
+#define UI_OZONE_PLATFORM_OBJECT_H_
+
+#include "base/memory/scoped_ptr.h"
+
+namespace ui {
+
+// Create an instance of platform specific object.
+//
+// This calls a static constructor function based on the --ozone-platform flag.
+//
+// For the platform called "foo", PlatformObject<PlatformWidget> will ultimately
+// call the function with signature
+//
+//   Bar* CreatePlatformWidgetFoo();
+//
+// A definition of this function for each compiled platform must be provided, or
+// link errors will result.
+//
+// To find the right constructor function, this uses static data defined in the
+// source file generated by the generate_constructor_list.py.
+template <class T>
+class PlatformObject {
+ public:
+  static scoped_ptr<T> Create();
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_OBJECT_H_
diff --git a/ui/ozone/platform_object_internal.h b/ui/ozone/platform_object_internal.h
new file mode 100644
index 0000000..68a42b3
--- /dev/null
+++ b/ui/ozone/platform_object_internal.h
@@ -0,0 +1,31 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_OBJECT_INTERNAL_H_
+#define UI_OZONE_PLATFORM_OBJECT_INTERNAL_H_
+
+#include "ui/ozone/ozone_export.h"
+#include "ui/ozone/platform_constructor_list.h"
+#include "ui/ozone/platform_object.h"
+#include "ui/ozone/platform_selection.h"
+
+namespace ui {
+
+template <class T>
+scoped_ptr<T> PlatformObject<T>::Create() {
+  typedef typename PlatformConstructorList<T>::Constructor Constructor;
+
+  // Determine selected platform (from --ozone-platform flag, or default).
+  int platform = GetOzonePlatformId();
+
+  // Look up the constructor in the constructor list.
+  Constructor constructor = PlatformConstructorList<T>::kConstructors[platform];
+
+  // Call the constructor.
+  return make_scoped_ptr(constructor());
+}
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_OBJECT_INTERNAL_H_
diff --git a/ui/ozone/platform_selection.cc b/ui/ozone/platform_selection.cc
new file mode 100644
index 0000000..69a3969
--- /dev/null
+++ b/ui/ozone/platform_selection.cc
@@ -0,0 +1,50 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/command_line.h"
+#include "base/logging.h"
+#include "ui/ozone/ozone_switches.h"
+#include "ui/ozone/platform_list.h"
+
+namespace ui {
+
+namespace {
+
+// Returns the name of the platform to use (value of --ozone-platform flag).
+std::string GetPlatformName() {
+  // The first platform is the default.
+  if (!CommandLine::ForCurrentProcess()->HasSwitch(switches::kOzonePlatform) &&
+      kPlatformCount > 0)
+    return kPlatformNames[0];
+  return CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
+      switches::kOzonePlatform);
+}
+
+int g_selected_platform = -1;
+
+}  // namespace
+
+int GetOzonePlatformId() {
+  if (g_selected_platform >= 0)
+    return g_selected_platform;
+
+  std::string platform_name = GetPlatformName();
+
+  // Search for a matching platform in the list.
+  for (int platform_id = 0; platform_id < kPlatformCount; ++platform_id) {
+    if (platform_name == kPlatformNames[platform_id]) {
+      g_selected_platform = platform_id;
+      return g_selected_platform;
+    }
+  }
+
+  LOG(FATAL) << "Invalid ozone platform: " << platform_name;
+  return -1;  // not reached
+}
+
+const char* GetOzonePlatformName() {
+  return kPlatformNames[GetOzonePlatformId()];
+}
+
+}  // namespace ui
diff --git a/ui/ozone/platform_selection.h b/ui/ozone/platform_selection.h
new file mode 100644
index 0000000..5a1229f
--- /dev/null
+++ b/ui/ozone/platform_selection.h
@@ -0,0 +1,21 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_SELECTION_H_
+#define UI_OZONE_PLATFORM_SELECTION_H_
+
+#include "ui/ozone/ozone_export.h"
+#include "ui/ozone/platform_list.h"
+
+namespace ui {
+
+// Get active platform id (by parsing --ozone-platform flag).
+OZONE_EXPORT int GetOzonePlatformId();
+
+// Get active platform name.
+OZONE_EXPORT const char* GetOzonePlatformName();
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_SELECTION_H_
-- 
1.7.9.5

