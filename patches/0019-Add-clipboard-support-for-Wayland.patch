From b77062379dacb88fdd6a057876eb2d7349ba1ebd Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@igalia.com>
Date: Mon, 14 Sep 2015 11:05:38 -0500
Subject: [PATCH] Add clipboard support for Wayland

Hopefully the actual ClipboardWayland class could be moved into the
Ozone-Wayland codebase, so it doesn't have to live in a
difficult-to-modify patch. But gyp is hard and I haven't figured out how
to do this.
---
 ui/base/clipboard/clipboard_aura.cc    |  9 ++++
 ui/base/clipboard/clipboard_aura.h     |  2 +-
 ui/base/clipboard/clipboard_wayland.cc | 88 ++++++++++++++++++++++++++++++++++
 ui/base/clipboard/clipboard_wayland.h  | 48 +++++++++++++++++++
 ui/base/ui_base.gyp                    |  3 ++
 5 files changed, 149 insertions(+), 1 deletion(-)
 create mode 100644 ui/base/clipboard/clipboard_wayland.cc
 create mode 100644 ui/base/clipboard/clipboard_wayland.h

diff --git a/ui/base/clipboard/clipboard_aura.cc b/ui/base/clipboard/clipboard_aura.cc
index e682392..148ffa6 100644
--- a/ui/base/clipboard/clipboard_aura.cc
+++ b/ui/base/clipboard/clipboard_aura.cc
@@ -16,6 +16,11 @@
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/gfx/geometry/size.h"
 
+#if defined(USE_OZONE) && USE_OZONE
+#include "ui/base/clipboard/clipboard_wayland.h"
+#include "ui/ozone/platform_selection.h"
+#endif
+
 namespace ui {
 
 namespace {
@@ -513,6 +518,10 @@ const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
 
 // Clipboard factory method.
 Clipboard* Clipboard::Create() {
+#if defined(USE_OZONE) && USE_OZONE
+  if (!strcmp(GetOzonePlatformName(), "wayland"))
+    return new ClipboardWayland;
+#endif
   return new ClipboardAura;
 }
 
diff --git a/ui/base/clipboard/clipboard_aura.h b/ui/base/clipboard/clipboard_aura.h
index e5fbc34..d50a7f4 100644
--- a/ui/base/clipboard/clipboard_aura.h
+++ b/ui/base/clipboard/clipboard_aura.h
@@ -10,7 +10,7 @@
 namespace ui {
 
 class ClipboardAura : public Clipboard {
- private:
+ protected:
   friend class Clipboard;
 
   ClipboardAura();
diff --git a/ui/base/clipboard/clipboard_wayland.cc b/ui/base/clipboard/clipboard_wayland.cc
new file mode 100644
index 0000000..b21fe74
--- /dev/null
+++ b/ui/base/clipboard/clipboard_wayland.cc
@@ -0,0 +1,88 @@
+// Copyright (c) 2015 Igalia S.L.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/clipboard/clipboard_wayland.h"
+
+namespace ui {
+
+// Implementation Note:
+//
+// ClipboardAura is designed to be the clipboard manager for ChromeOS. That's
+// overkill for our purposes, since in Wayland the compositor plays the role of
+// the clipboard manager. But it is exactly what we need to serve as a proxy for
+// the clipboard in the browser process. We don't want it to manage a stack of
+// clipboard history, though, so we clear the clipboard before writing new data.
+// TODO(mcatanzaro): Decide if clearing the clipboard history before each write
+// is really necessary. It's probably harmless to keep old history.
+//
+// Note that CLIPBOARD_TYPE_COPY_PASTE is the only supported clipboard type.
+// In particular, Wayland does not have any equivalent to the PRIMARY selection
+// (CLIPBOARD_TYPE_SELECTION), to the dismay of middle-click paste lovers.
+
+ClipboardWayland::ClipboardWayland() {
+}
+
+ClipboardWayland::~ClipboardWayland() {
+}
+
+void ClipboardWayland::Clear(ClipboardType type) {
+  ClipboardAura::Clear(type);
+}
+
+void ClipboardWayland::Clear() {
+  Clear(CLIPBOARD_TYPE_COPY_PASTE);
+}
+
+void ClipboardWayland::WriteObjects(ClipboardType type,
+                                    const ObjectMap& objects) {
+  Clear();
+  ClipboardAura::WriteObjects(type, objects);
+}
+
+void ClipboardWayland::WriteText(const char* text_data, size_t text_len) {
+ Clear();
+ ClipboardAura::WriteText(text_data, text_len);
+}
+
+void ClipboardWayland::WriteHTML(const char* markup_data,
+                                 size_t markup_len,
+                                 const char* url_data,
+                                 size_t url_len) {
+  Clear();
+  ClipboardAura::WriteHTML(markup_data, markup_len, url_data, url_len);
+}
+
+void ClipboardWayland::WriteRTF(const char* rtf_data, size_t data_len) {
+  Clear();
+  ClipboardAura::WriteRTF(rtf_data, data_len);
+}
+
+void ClipboardWayland::WriteBookmark(const char* title_data,
+                                     size_t title_len,
+                                     const char* url_data,
+                                     size_t url_len) {
+  Clear();
+  ClipboardAura::WriteBookmark(title_data, title_len, url_data, url_len);
+}
+
+void ClipboardWayland::WriteWebSmartPaste() {
+  // TODO(mcatanzaro): Figure out what this is supposed to do. Is it working
+  // properly, or is it broken by all the calls to Clear()?
+  Clear();
+  ClipboardAura::WriteWebSmartPaste();
+}
+
+void ClipboardWayland::WriteBitmap(const SkBitmap& bitmap) {
+  Clear();
+  ClipboardAura::WriteBitmap(bitmap);
+}
+
+void ClipboardWayland::WriteData(const FormatType& format,
+                                 const char* data_data,
+                                 size_t data_len) {
+  Clear();
+  ClipboardAura::WriteData(format, data_data, data_len);
+}
+
+}  // namespace ui
diff --git a/ui/base/clipboard/clipboard_wayland.h b/ui/base/clipboard/clipboard_wayland.h
new file mode 100644
index 0000000..7747217
--- /dev/null
+++ b/ui/base/clipboard/clipboard_wayland.h
@@ -0,0 +1,48 @@
+// Copyright 2015 Igalia S.L.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef OZONE_UI_BASE_CLIPBOARD_CLIPBOARD_WAYLAND_H_
+#define OZONE_UI_BASE_CLIPBOARD_CLIPBOARD_WAYLAND_H_
+
+#include "ui/base/clipboard/clipboard_aura.h"
+
+#include "base/memory/scoped_ptr.h"
+
+namespace ui {
+
+class ClipboardWayland : public ClipboardAura {
+ public:
+  void Clear();
+
+ private:
+  friend class Clipboard;
+
+  ClipboardWayland();
+  ~ClipboardWayland() override;
+
+  void Clear(ClipboardType type) override;
+
+  void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
+  void WriteText(const char* text_data, size_t text_len) override;
+  void WriteHTML(const char* markup_data,
+                 size_t markup_len,
+                 const char* url_data,
+                 size_t url_len) override;
+  void WriteRTF(const char* rtf_data, size_t data_len) override;
+  void WriteBookmark(const char* title_data,
+                     size_t title_len,
+                     const char* url_data,
+                     size_t url_len) override;
+  void WriteWebSmartPaste() override;
+  void WriteBitmap(const SkBitmap& bitmap) override;
+  void WriteData(const FormatType& format,
+                 const char* data_data,
+                 size_t data_len) override;
+
+  DISALLOW_COPY_AND_ASSIGN(ClipboardWayland);
+};
+
+}  // namespace ui
+
+#endif  // OZONE_UI_BASE_CLIPBOARD_CLIPBOARD_WAYLAND_H_
diff --git a/ui/base/ui_base.gyp b/ui/base/ui_base.gyp
index 36f07f7..cd1bd62 100644
--- a/ui/base/ui_base.gyp
+++ b/ui/base/ui_base.gyp
@@ -68,6 +68,8 @@
         'clipboard/clipboard_types.h',
         'clipboard/clipboard_util_win.cc',
         'clipboard/clipboard_util_win.h',
+        'clipboard/clipboard_wayland.cc',
+        'clipboard/clipboard_wayland.h',
         'clipboard/clipboard_win.cc',
         'clipboard/clipboard_win.h',
         'clipboard/custom_data_helper.cc',
@@ -453,6 +455,7 @@
         ['OS=="win" or use_clipboard_aurax11==1', {
           'sources!': [
             'clipboard/clipboard_aura.cc',
+            'clipboard/clipboard_wayland.cc',
           ],
         }, {
           'sources!': [
-- 
2.4.3

